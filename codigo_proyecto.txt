================================================
FILE: SistemaGestionProyectos2.sln
================================================
﻿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.14.36401.2 d17.14
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "SistemaGestionProyectos2", "SistemaGestionProyectos2\SistemaGestionProyectos2.csproj", "{80481000-F6AF-4050-B909-F887208BC920}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{80481000-F6AF-4050-B909-F887208BC920}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{80481000-F6AF-4050-B909-F887208BC920}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{80481000-F6AF-4050-B909-F887208BC920}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{80481000-F6AF-4050-B909-F887208BC920}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {0EC1DA12-3E8F-4442-A16B-AD7717A972CD}
	EndGlobalSection
EndGlobal



================================================
FILE: SistemaGestionProyectos2/App.xaml
================================================
﻿<Application x:Class="SistemaGestionProyectos2.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             StartupUri="Views/LoginWindow.xaml">
    <Application.Resources>
    </Application.Resources>
</Application>


================================================
FILE: SistemaGestionProyectos2/App.xaml.cs
================================================
﻿using System;
using System.Windows;
using System.Windows.Threading;

namespace SistemaGestionProyectos2
{
    public partial class App : Application
    {
        protected override void OnStartup(StartupEventArgs e)
        {
            // Capturar TODOS los errores
            AppDomain.CurrentDomain.UnhandledException += (s, args) =>
            {
                Exception ex = (Exception)args.ExceptionObject;
                MessageBox.Show(
                    $"Error crítico en la aplicación:\n\n{ex.Message}\n\nDetalles:\n{ex.StackTrace}",
                    "Error Fatal",
                    MessageBoxButton.OK,
                    MessageBoxImage.Error);

                // Log to debug
                System.Diagnostics.Debug.WriteLine($"CRITICAL ERROR: {ex}");
            };

            this.DispatcherUnhandledException += (s, args) =>
            {
                MessageBox.Show(
                    $"Error en la interfaz:\n\n{args.Exception.Message}",
                    "Error UI",
                    MessageBoxButton.OK,
                    MessageBoxImage.Error);

                System.Diagnostics.Debug.WriteLine($"UI ERROR: {args.Exception}");
                args.Handled = true;
            };

            // Log de inicio
            System.Diagnostics.Debug.WriteLine("=== APLICACIÓN INICIANDO ===");

            base.OnStartup(e);
        }
    }
}


================================================
FILE: SistemaGestionProyectos2/AssemblyInfo.cs
================================================
using System.Windows;

[assembly: ThemeInfo(
    ResourceDictionaryLocation.None,            //where theme specific resource dictionaries are located
                                                //(used if a resource is not found in the page,
                                                // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly   //where the generic resource dictionary is located
                                                //(used if a resource is not found in the page,
                                                // app, or any theme specific resource dictionaries)
)]



================================================
FILE: SistemaGestionProyectos2/SistemaGestionProyectos2.csproj
================================================
﻿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
	<ApplicationIcon>app.ico</ApplicationIcon>
    <UseWPF>true</UseWPF>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="appsettings.json" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="appsettings.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="BCrypt.Net-Next" Version="4.0.3" />
    <PackageReference Include="Microsoft.Extensions.Configuration.Binder" Version="9.0.8" />
    <PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="9.0.8" />
    <PackageReference Include="supabase-csharp" Version="0.16.2" />
  </ItemGroup>

</Project>



================================================
FILE: SistemaGestionProyectos2/Models/DataModels.cs
================================================
﻿using System;

namespace SistemaGestionProyectos2.Models
{
    // Modelo para datos de órdenes
    public class OrderData
    {
        public int Id { get; set; }
        public string OrderNumber { get; set; }
        public string QuotationNumber { get; set; }
        public DateTime OrderDate { get; set; }
        public int ClientId { get; set; }
        public string ClientName { get; set; }
        public int ContactId { get; set; }
        public string ContactName { get; set; }
        public string Description { get; set; }
        public int VendorId { get; set; }
        public string VendorName { get; set; }
        public DateTime PromiseDate { get; set; }
        public int ProgressPercentage { get; set; }
        public int OrderPercentage { get; set; }
        public decimal Subtotal { get; set; }
        public decimal Total { get; set; }
        public decimal Expense { get; set; }
        public string Status { get; set; }
        public int StatusId { get; set; }
        public bool Invoiced { get; set; }
        public DateTime? LastInvoiceDate { get; set; }
    }

    // Modelo para clientes
    public class ClientData
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Address { get; set; }
        public string TaxId { get; set; }
        public string Phone { get; set; }
        public string Email { get; set; }
    }

    // Modelo para contactos
    public class ContactData
    {
        public int Id { get; set; }
        public int ClientId { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public string Phone { get; set; }
        public string Position { get; set; }
    }
}


================================================
FILE: SistemaGestionProyectos2/Models/OrderViewModel.cs
================================================
﻿using System;

namespace SistemaGestionProyectos2.Models
{
    public class OrderViewModel
    {
        public int Id { get; set; }
        public string OrderNumber { get; set; }
        public DateTime OrderDate { get; set; }
        public string ClientName { get; set; }
        public string Description { get; set; }
        public string VendorName { get; set; }
        public DateTime PromiseDate { get; set; }
        public int ProgressPercentage { get; set; }
        public int OrderPercentage { get; set; }
        public decimal Subtotal { get; set; }
        public decimal Total { get; set; }
        public string Status { get; set; }
        public bool Invoiced { get; set; }
        public DateTime? LastInvoiceDate { get; set; }
    }
}


================================================
FILE: SistemaGestionProyectos2/Models/UserSession.cs
================================================
﻿// Crear archivo: Models/UserSession.cs
namespace SistemaGestionProyectos2.Models
{
    public class UserSession
    {
        public int Id { get; set; }
        public string Username { get; set; }
        public string FullName { get; set; }
        public string Role { get; set; }
        public DateTime LoginTime { get; set; }
    }
}


================================================
FILE: SistemaGestionProyectos2/Services/AuthenticationService.cs
================================================
// AuthenticationService.cs 



================================================
FILE: SistemaGestionProyectos2/Services/IDataService.cs
================================================
// IDataService.cs 



================================================
FILE: SistemaGestionProyectos2/Services/ProyectoService.cs
================================================
// ProyectoService.cs 



================================================
FILE: SistemaGestionProyectos2/Services/SupabaseService.cs
================================================
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Supabase;
using Postgrest.Attributes;
using Postgrest.Models;

namespace SistemaGestionProyectos2.Services
{
    // Singleton Service para Supabase
    public class SupabaseService
    {
        private static SupabaseService _instance;
        private static readonly object _lock = new object();
        private Client _supabaseClient;
        private IConfiguration _configuration;
        private bool _isInitialized = false;

        // Singleton Pattern
        public static SupabaseService Instance
        {
            get
            {
                if (_instance == null)
                {
                    lock (_lock)
                    {
                        if (_instance == null)
                        {
                            _instance = new SupabaseService();
                        }
                    }
                }
                return _instance;
            }
        }

        private SupabaseService()
        {
            InitializeAsync().Wait();
        }

        private async Task InitializeAsync()
        {
            try
            {
                // Cargar configuración
                var builder = new ConfigurationBuilder()
                    .SetBasePath(System.IO.Directory.GetCurrentDirectory())
                    .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true);

                _configuration = builder.Build();

                var url = _configuration["Supabase:Url"];
                var key = _configuration["Supabase:AnonKey"];

                if (string.IsNullOrEmpty(url) || string.IsNullOrEmpty(key))
                {
                    throw new Exception("Credenciales de Supabase no configuradas en appsettings.json");
                }

                var options = new SupabaseOptions
                {
                    AutoConnectRealtime = false
                };

                _supabaseClient = new Client(url, key, options);
                await _supabaseClient.InitializeAsync();

                _isInitialized = true;
                System.Diagnostics.Debug.WriteLine("✅ Supabase inicializado correctamente");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"❌ Error inicializando Supabase: {ex.Message}");
                throw;
            }
        }

        public Client GetClient()
        {
            if (!_isInitialized)
            {
                throw new InvalidOperationException("Supabase no está inicializado");
            }
            return _supabaseClient;
        }

        // ===============================================
        // MÉTODOS PARA ÓRDENES
        // ===============================================

        public async Task<List<OrderDb>> GetOrders(int limit = 100)
        {
            try
            {
                var response = await _supabaseClient
                    .From<OrderDb>()
                    .Select("*")
                    .Order("f_podate", Postgrest.Constants.Ordering.Descending)
                    .Limit(limit)
                    .Get();

                return response?.Models ?? new List<OrderDb>();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error obteniendo órdenes: {ex.Message}");
                throw;
            }
        }

        public async Task<OrderDb> GetOrderById(int orderId)
        {
            try
            {
                var response = await _supabaseClient
                    .From<OrderDb>()
                    .Where(x => x.Id == orderId)
                    .Single();

                return response;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error obteniendo orden {orderId}: {ex.Message}");
                throw;
            }
        }

        public async Task<List<OrderDb>> SearchOrders(string searchTerm)
        {
            try
            {
                var response = await _supabaseClient
                    .From<OrderDb>()
                    .Filter("f_po", Postgrest.Constants.Operator.ILike, $"%{searchTerm}%")
                    .Get();

                return response?.Models ?? new List<OrderDb>();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error buscando órdenes: {ex.Message}");
                throw;
            }
        }

        public async Task<OrderDb> CreateOrder(OrderDb order, int userId = 0)
        {
            try
            {
                // Asegurar fechas válidas
                if (order.PoDate == null || order.PoDate == default)
                    order.PoDate = DateTime.Now;

                // No intentar asignar CreatedBy ya que no existe en el modelo
                // Si necesitas tracking de usuario, deberás agregarlo al modelo OrderDb

                var response = await _supabaseClient
                    .From<OrderDb>()
                    .Insert(order);

                if (response?.Models?.Count > 0)
                {
                    return response.Models.First();
                }

                throw new Exception("No se pudo crear la orden");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error creando orden: {ex.Message}");
                throw;
            }
        }

        public async Task<bool> UpdateOrder(OrderDb order, int userId = 0)
        {
            try
            {
                // No intentar asignar UpdatedBy ya que no existe en el modelo
                // Si necesitas tracking de usuario, deberás agregarlo al modelo OrderDb

                var response = await _supabaseClient
                    .From<OrderDb>()
                    .Where(x => x.Id == order.Id)
                    .Set(x => x.Po, order.Po)
                    .Set(x => x.Quote, order.Quote)
                    .Set(x => x.PoDate, order.PoDate)
                    .Set(x => x.ClientId, order.ClientId)
                    .Set(x => x.ContactId, order.ContactId)
                    .Set(x => x.Description, order.Description)
                    .Set(x => x.SalesmanId, order.SalesmanId)
                    .Set(x => x.EstDelivery, order.EstDelivery)
                    .Set(x => x.ProgressPercentage, order.ProgressPercentage)
                    .Set(x => x.OrderPercentage, order.OrderPercentage)
                    .Set(x => x.SaleSubtotal, order.SaleSubtotal)
                    .Set(x => x.SaleTotal, order.SaleTotal)
                    .Set(x => x.Expense, order.Expense)
                    .Set(x => x.OrderStatus, order.OrderStatus)
                    .Update();

                return response?.Models?.Count > 0;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error actualizando orden: {ex.Message}");
                return false;
            }
        }

        public async Task<bool> DeleteOrder(int orderId)
        {
            try
            {
                await _supabaseClient
                    .From<OrderDb>()
                    .Where(x => x.Id == orderId)
                    .Delete();

                return true;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error eliminando orden: {ex.Message}");
                return false;
            }
        }

        // ===============================================
        // MÉTODOS PARA CLIENTES
        // ===============================================

        public async Task<List<ClientDb>> GetClients()
        {
            try
            {
                var response = await _supabaseClient
                    .From<ClientDb>()
                    .Select("*")
                    .Order("f_name", Postgrest.Constants.Ordering.Ascending)
                    .Get();

                return response?.Models ?? new List<ClientDb>();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error obteniendo clientes: {ex.Message}");
                throw;
            }
        }

        // ===============================================
        // MÉTODOS PARA CONTACTOS
        // ===============================================

        public async Task<List<ContactDb>> GetContactsByClient(int clientId)
        {
            try
            {
                var response = await _supabaseClient
                    .From<ContactDb>()
                    .Where(x => x.ClientId == clientId)
                    .Get();

                return response?.Models ?? new List<ContactDb>();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error obteniendo contactos: {ex.Message}");
                throw;
            }
        }

        // ===============================================
        // MÉTODOS PARA USUARIOS
        // ===============================================

        public async Task<UserDb> GetUserByUsername(string username)
        {
            try
            {
                var response = await _supabaseClient
                    .From<UserDb>()
                    .Where(x => x.Username == username)
                    .Single();

                return response;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error obteniendo usuario: {ex.Message}");
                return null;
            }
        }

        public async Task<(bool Success, UserDb User, string Message)> AuthenticateUser(string username, string password)
        {
            try
            {
                // Buscar usuario por username
                var response = await _supabaseClient
                    .From<UserDb>()
                    .Where(x => x.Username == username)
                    .Single();

                if (response == null)
                {
                    return (false, null, "Usuario no encontrado");
                }

                // Verificar contraseña con BCrypt
                bool isPasswordValid = BCrypt.Net.BCrypt.Verify(password, response.PasswordHash);

                if (!isPasswordValid)
                {
                    return (false, null, "Contraseña incorrecta");
                }

                // Verificar si el usuario está activo
                if (!response.IsActive)
                {
                    return (false, null, "Usuario desactivado");
                }

                // Actualizar último login
                await _supabaseClient
                    .From<UserDb>()
                    .Where(x => x.Id == response.Id)
                    .Set(x => x.LastLogin, DateTime.Now)
                    .Update();

                return (true, response, "Login exitoso");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error en autenticación: {ex.Message}");
                return (false, null, $"Error: {ex.Message}");
            }
        }

        public async Task<List<VendorDb>> GetVendors()
        {
            try
            {
                var response = await _supabaseClient
                    .From<UserDb>()
                    .Where(x => x.Role == "salesperson")
                    .Where(x => x.IsActive == true)
                    .Get();

                var users = response?.Models ?? new List<UserDb>();

                // Convertir UserDb a VendorDb
                return users.Select(u => VendorDb.FromUser(u)).ToList();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error obteniendo vendedores: {ex.Message}");
                throw;
            }
        }

        // ===============================================
        // MÉTODOS PARA ESTADOS DE ÓRDENES
        // ===============================================

        public async Task<List<OrderStatusDb>> GetOrderStatuses()
        {
            try
            {
                var response = await _supabaseClient
                    .From<OrderStatusDb>()
                    .Order("display_order", Postgrest.Constants.Ordering.Ascending)
                    .Get();

                return response?.Models ?? new List<OrderStatusDb>();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error obteniendo estados: {ex.Message}");
                throw;
            }
        }

        // ===============================================
        // MÉTODOS PARA ÓRDENES CON PAGINACIÓN
        // ===============================================

        public async Task<List<OrderDb>> GetOrders(int limit = 100, int offset = 0)
        {
            try
            {
                var response = await _supabaseClient
                    .From<OrderDb>()
                    .Select("*")
                    .Order("f_podate", Postgrest.Constants.Ordering.Descending)
                    .Range(offset, offset + limit - 1)
                    .Get();

                return response?.Models ?? new List<OrderDb>();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error obteniendo órdenes: {ex.Message}");
                throw;
            }
        }

        // ===============================================
        // MÉTODOS DE UTILIDAD
        // ===============================================

        public async Task<bool> TestConnection()
        {
            try
            {
                var response = await _supabaseClient
                    .From<OrderDb>()
                    .Select("*")
                    .Limit(1)
                    .Get();

                return true;
            }
            catch
            {
                return false;
            }
        }
    }

    // ===============================================
    // MODELOS DE BASE DE DATOS
    // ===============================================

    [Table("t_order")]
    public class OrderDb : BaseModel
    {
        [PrimaryKey("f_order")]
        public int Id { get; set; }

        [Column("f_po")]
        public string Po { get; set; } // Cambiado de OrderNumber a Po

        // Alias para compatibilidad
        public string OrderNumber => Po;

        [Column("f_quote")]
        public string Quote { get; set; } // Cambiado de QuotationNumber a Quote

        // Alias para compatibilidad
        public string QuotationNumber => Quote;

        [Column("f_podate")]
        public DateTime? PoDate { get; set; } // Cambiado de OrderDate a PoDate

        // Alias para compatibilidad
        public DateTime? OrderDate => PoDate;

        [Column("f_client")]
        public int? ClientId { get; set; }

        [Column("f_contact")]
        public int? ContactId { get; set; }

        [Column("f_description")]
        public string Description { get; set; }

        [Column("f_salesman")]
        public int? SalesmanId { get; set; } // Cambiado de VendorId a SalesmanId

        // Alias para compatibilidad
        public int? VendorId => SalesmanId;

        [Column("f_estdelivery")]
        public DateTime? EstDelivery { get; set; } // Cambiado de PromiseDate a EstDelivery

        // Alias para compatibilidad
        public DateTime? PromiseDate => EstDelivery;

        [Column("f_salesubtotal")]
        public decimal? SaleSubtotal { get; set; } // Cambiado de Subtotal a SaleSubtotal

        // Alias para compatibilidad
        public decimal Subtotal => SaleSubtotal ?? 0;

        [Column("f_saletotal")]
        public decimal? SaleTotal { get; set; } // Cambiado de Total a SaleTotal

        // Alias para compatibilidad
        public decimal Total => SaleTotal ?? 0;

        [Column("f_expense")]
        public decimal? Expense { get; set; }

        [Column("f_orderstat")]
        public int? OrderStatus { get; set; } // Cambiado de StatusId a OrderStatus

        // Alias para compatibilidad
        public int? StatusId => OrderStatus;

        // Campos adicionales que pueden estar en la BD
        public int ProgressPercentage { get; set; }
        public int OrderPercentage { get; set; }
    }

    [Table("t_client")]
    public class ClientDb : BaseModel
    {
        [PrimaryKey("f_client")]
        public int Id { get; set; }

        [Column("f_name")]
        public string Name { get; set; }

        [Column("f_address1")]
        public string Address1 { get; set; }

        [Column("f_address2")]
        public string Address2 { get; set; }

        [Column("f_credit")]
        public int Credit { get; set; }

        [Column("tax_id")]
        public string TaxId { get; set; }

        [Column("phone")]
        public string Phone { get; set; }

        [Column("email")]
        public string Email { get; set; }

        [Column("is_active")]
        public bool IsActive { get; set; }
    }

    [Table("t_contact")]
    public class ContactDb : BaseModel
    {
        [PrimaryKey("f_contact")]
        public int Id { get; set; }

        [Column("f_client")]
        public int ClientId { get; set; }

        [Column("f_contactname")]
        public string ContactName { get; set; } // Cambiado de Name a ContactName

        [Column("f_email")]
        public string Email { get; set; }

        [Column("f_phone")]
        public string Phone { get; set; }

        [Column("position")]
        public string Position { get; set; }

        [Column("is_primary")]
        public bool IsPrimary { get; set; }

        [Column("is_active")]
        public bool IsActive { get; set; }
    }

    [Table("users")]
    public class UserDb : BaseModel
    {
        [PrimaryKey("id")]
        public int Id { get; set; }

        [Column("username")]
        public string Username { get; set; }

        [Column("email")]
        public string Email { get; set; }

        [Column("password_hash")]
        public string PasswordHash { get; set; }

        [Column("full_name")]
        public string FullName { get; set; }

        [Column("role")]
        public string Role { get; set; }

        [Column("is_active")]
        public bool IsActive { get; set; }

        [Column("last_login")]
        public DateTime? LastLogin { get; set; }
    }

    [Table("order_status")]
    public class OrderStatusDb : BaseModel
    {
        [PrimaryKey("f_orderstatus")]
        public int Id { get; set; }

        [Column("f_name")]
        public string Name { get; set; }

        [Column("is_active")]
        public bool IsActive { get; set; }

        [Column("display_order")]
        public int DisplayOrder { get; set; }
    }

    // Clase VendorDb para compatibilidad con el código existente
    public class VendorDb
    {
        public int Id { get; set; }
        public string VendorName { get; set; }

        // Constructor desde UserDb
        public static VendorDb FromUser(UserDb user)
        {
            return new VendorDb
            {
                Id = user.Id,
                VendorName = user.FullName
            };
        }
    }
}


================================================
FILE: SistemaGestionProyectos2/Services/TestSupabaseService.cs
================================================
﻿using System;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Supabase;

namespace SistemaGestionProyectos2.Services
{
    public class TestSupabaseService
    {
        private IConfiguration _configuration;

        public async Task<(bool Success, string Message, string Details)> TestConnection()
        {
            try
            {
                // Paso 1: Cargar configuración
                var builder = new ConfigurationBuilder()
                    .SetBasePath(System.IO.Directory.GetCurrentDirectory())
                    .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true);

                _configuration = builder.Build();

                // Paso 2: Obtener credenciales
                var url = _configuration["Supabase:Url"];
                var key = _configuration["Supabase:AnonKey"];

                // Validar que existan
                if (string.IsNullOrEmpty(url))
                {
                    return (false, "URL de Supabase no configurada", "Falta 'Supabase:Url' en appsettings.json");
                }

                if (string.IsNullOrEmpty(key))
                {
                    return (false, "API Key no configurada", "Falta 'Supabase:AnonKey' en appsettings.json");
                }

                // Paso 3: Intentar crear cliente
                var options = new SupabaseOptions
                {
                    AutoConnectRealtime = false // No conectar realtime para el test
                };

                var client = new Client(url, key, options);

                // Paso 4: Inicializar
                await client.InitializeAsync();

                // Paso 5: Hacer una consulta simple para verificar
                var response = await client
                    .From<TestTable>()
                    .Select("*")
                    .Limit(1)
                    .Get();

                return (true,
                    "✅ Conexión exitosa",
                    $"URL: {url}\n" +
                    $"Cliente inicializado correctamente\n" +
                    $"Prueba de consulta: OK");
            }
            catch (System.IO.FileNotFoundException)
            {
                return (false,
                    "Archivo de configuración no encontrado",
                    "No se encuentra 'appsettings.json' en el directorio de la aplicación");
            }
            catch (Exception ex)
            {
                return (false,
                    "Error de conexión",
                    $"Tipo: {ex.GetType().Name}\n" +
                    $"Mensaje: {ex.Message}\n" +
                    $"Stack: {ex.StackTrace?.Split('\n')[0]}");
            }
        }

        // Clase temporal para la prueba
        [Postgrest.Attributes.Table("t_order")]
        private class TestTable : Postgrest.Models.BaseModel
        {
            [Postgrest.Attributes.PrimaryKey("f_order")]
            public int Id { get; set; }
        }
    }
}


================================================
FILE: SistemaGestionProyectos2/ViewModels/BaseViewModel.cs
================================================
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace SistemaGestionProyectos2.ViewModels
{
    public class BaseViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler? PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        protected bool SetProperty<T>(ref T storage, T value, [CallerMemberName] string? propertyName = null)
        {
            if (Equals(storage, value))
                return false;

            storage = value;
            OnPropertyChanged(propertyName);
            return true;
        }
    }
}


================================================
FILE: SistemaGestionProyectos2/ViewModels/LoginViewModel.cs
================================================
// LoginViewModel.cs 



================================================
FILE: SistemaGestionProyectos2/ViewModels/MainViewModel.cs
================================================
// MainViewModel.cs 



================================================
FILE: SistemaGestionProyectos2/ViewModels/ProyectoViewModel.cs
================================================
// ProyectoViewModel.cs 



================================================
FILE: SistemaGestionProyectos2/Views/EditOrderWindow.xaml
================================================
﻿<Window x:Class="SistemaGestionProyectos2.Views.EditOrderWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Editar Orden - IMA Mecatrónica" 
        Height="750" 
        Width="650"
        WindowStartupLocation="CenterOwner"
        ResizeMode="NoResize">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Header -->
        <Border Grid.Row="0" Background="Black" Height="50">
            <Grid>
                <StackPanel Orientation="Horizontal" 
                           VerticalAlignment="Center"
                           Margin="20,0">
                    <TextBlock Text="✏" 
                             Foreground="#2196F3"
                             FontSize="20"
                             Margin="0,0,15,0"/>
                    <TextBlock Text="EDITAR ORDEN" 
                             Foreground="White"
                             FontSize="18"
                             FontWeight="Bold"
                             VerticalAlignment="Center"/>
                    <TextBlock x:Name="OrderNumberHeader"
                             Text=" - #" 
                             Foreground="#FFC107"
                             FontSize="16"
                             VerticalAlignment="Center"
                             Margin="10,0,0,0"/>
                </StackPanel>

                <StackPanel Orientation="Horizontal"
                          HorizontalAlignment="Right"
                          VerticalAlignment="Center"
                          Margin="0,0,20,0">
                    <TextBlock Text="Rol: "
                             Foreground="#888"
                             FontSize="12"
                             VerticalAlignment="Center"/>
                    <TextBlock x:Name="UserRoleText"
                             Text="Coordinador"
                             Foreground="White"
                             FontSize="12"
                             FontWeight="Bold"
                             VerticalAlignment="Center"/>
                </StackPanel>
            </Grid>
        </Border>

        <!-- Formulario -->
        <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto">
            <Grid Margin="30,20">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <!-- Aviso de permisos -->
                <Border x:Name="PermissionsNotice"
                       Grid.Row="0"
                       Background="#E3F2FD"
                       BorderBrush="#2196F3"
                       BorderThickness="1"
                       CornerRadius="5"
                       Padding="15"
                       Margin="0,0,0,20">
                    <StackPanel>
                        <TextBlock Text="ℹ Permisos de Edición"
                                 FontWeight="Bold"
                                 Foreground="#1976D2"
                                 FontSize="12"
                                 Margin="0,0,0,5"/>
                        <TextBlock x:Name="PermissionsText"
                                 Text="Como Coordinador, puede editar: Fecha Promesa, % Avance y Estatus"
                                 Foreground="#555"
                                 FontSize="11"
                                 TextWrapping="Wrap"/>
                    </StackPanel>
                </Border>

                <!-- Sección: Información Básica (Solo Lectura) -->
                <Border Grid.Row="1" 
                       Background="#f5f5f5" 
                       Padding="10"
                       Margin="0,0,0,15">
                    <TextBlock Text="INFORMACIÓN BÁSICA (Solo Lectura)" 
                             FontWeight="Bold"
                             FontSize="12"/>
                </Border>

                <!-- Campos de solo lectura -->
                <Grid Grid.Row="2" Margin="0,0,0,20">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <!-- Primera fila -->
                    <Grid Grid.Row="0" Margin="0,0,0,15">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="20"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <StackPanel Grid.Column="0">
                            <TextBlock Text="ORDEN DE COMPRA" 
                                     FontSize="11"
                                     FontWeight="SemiBold"
                                     Margin="0,0,0,5"/>
                            <TextBox x:Name="OrderNumberTextBox"
                                    Height="35"
                                    FontSize="14"
                                    IsReadOnly="True"
                                    Background="#F0F0F0"/>
                        </StackPanel>

                        <StackPanel Grid.Column="2">
                            <TextBlock Text="FECHA O.C." 
                                     FontSize="11"
                                     FontWeight="SemiBold"
                                     Margin="0,0,0,5"/>
                            <TextBox x:Name="OrderDateTextBox"
                                    Height="35"
                                    FontSize="14"
                                    IsReadOnly="True"
                                    Background="#F0F0F0"/>
                        </StackPanel>
                    </Grid>

                    <!-- Segunda fila -->
                    <Grid Grid.Row="1" Margin="0,0,0,15">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="20"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <StackPanel Grid.Column="0">
                            <TextBlock Text="CLIENTE" 
                                     FontSize="11"
                                     FontWeight="SemiBold"
                                     Margin="0,0,0,5"/>
                            <TextBox x:Name="ClientTextBox"
                                    Height="35"
                                    FontSize="14"
                                    IsReadOnly="True"
                                    Background="#F0F0F0"/>
                        </StackPanel>

                        <StackPanel Grid.Column="2">
                            <TextBlock Text="VENDEDOR" 
                                     FontSize="11"
                                     FontWeight="SemiBold"
                                     Margin="0,0,0,5"/>
                            <TextBox x:Name="VendorTextBox"
                                    Height="35"
                                    FontSize="14"
                                    IsReadOnly="True"
                                    Background="#F0F0F0"/>
                        </StackPanel>
                    </Grid>

                    <!-- Descripción -->
                    <StackPanel Grid.Row="2" Margin="0,0,0,15">
                        <TextBlock Text="DESCRIPCIÓN" 
                                 FontSize="11"
                                 FontWeight="SemiBold"
                                 Margin="0,0,0,5"/>
                        <TextBox x:Name="DescriptionTextBox"
                                Height="60"
                                FontSize="14"
                                TextWrapping="Wrap"
                                IsReadOnly="True"
                                Background="#F0F0F0"
                                VerticalScrollBarVisibility="Auto"/>
                    </StackPanel>
                </Grid>

                <!-- Sección: Campos Editables -->
                <Border Grid.Row="3" 
                       Background="#E8F5E9" 
                       Padding="10"
                       Margin="0,0,0,15">
                    <TextBlock Text="CAMPOS EDITABLES" 
                             FontWeight="Bold"
                             FontSize="12"
                             Foreground="#2E7D32"/>
                </Border>

                <!-- Campos editables para Coordinador -->
                <Grid Grid.Row="4" Margin="0,0,0,20">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <!-- Fecha Promesa -->
                    <StackPanel Grid.Row="0" Margin="0,0,0,15">
                        <TextBlock Text="FECHA PROMESA / ENTREGA EST. *" 
                                 FontSize="11"
                                 FontWeight="SemiBold"
                                 Foreground="#2E7D32"
                                 Margin="0,0,0,5"/>
                        <DatePicker x:Name="PromiseDatePicker"
                                   Height="35"
                                   FontSize="14"
                                   Background="White"/>
                    </StackPanel>

                    <!-- % Avance -->
                    <Grid Grid.Row="1" Margin="0,0,0,15">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="20"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <StackPanel Grid.Column="0">
                            <TextBlock Text="% AVANCE *" 
                                     FontSize="11"
                                     FontWeight="SemiBold"
                                     Foreground="#2E7D32"
                                     Margin="0,0,0,5"/>
                            <Grid>
                                <Slider x:Name="ProgressSlider"
                                       Minimum="0"
                                       Maximum="100"
                                       Value="0"
                                       Height="35"
                                       VerticalAlignment="Center"
                                       ValueChanged="ProgressSlider_ValueChanged"/>
                                <TextBlock x:Name="ProgressValueText"
                                         Text="0%"
                                         HorizontalAlignment="Right"
                                         VerticalAlignment="Center"
                                         Margin="0,0,10,0"
                                         FontWeight="Bold"
                                         Foreground="#2E7D32"/>
                            </Grid>
                        </StackPanel>

                        <StackPanel Grid.Column="2">
                            <TextBlock Text="ESTATUS *" 
                                     FontSize="11"
                                     FontWeight="SemiBold"
                                     Foreground="#2E7D32"
                                     Margin="0,0,0,5"/>
                            <ComboBox x:Name="StatusComboBox"
                                     Height="35"
                                     FontSize="14">
                                <ComboBoxItem Content="EN PROCESO"/>
                                <ComboBoxItem Content="COMPLETADA"/>
                                <ComboBoxItem Content="EN ESPERA"/>
                                <ComboBoxItem Content="CANCELADA"/>
                            </ComboBox>
                        </StackPanel>
                    </Grid>
                </Grid>

                <!-- Sección: Información Financiera (Solo Admin) -->
                <Border x:Name="FinancialSection"
                       Grid.Row="5" 
                       Background="#f5f5f5" 
                       Padding="10"
                       Margin="0,0,0,15"
                       Visibility="Collapsed">
                    <TextBlock Text="INFORMACIÓN FINANCIERA" 
                             FontWeight="Bold"
                             FontSize="12"/>
                </Border>

                <!-- Campos financieros (Solo Admin) -->
                <Grid x:Name="FinancialFields"
                     Grid.Row="6" 
                     Margin="0,0,0,20"
                     Visibility="Collapsed">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="20"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="20"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <StackPanel Grid.Column="0">
                        <TextBlock Text="SUBTOTAL (MXN)" 
                                 FontSize="11"
                                 FontWeight="SemiBold"
                                 Foreground="#2E7D32"
                                 Margin="0,0,0,5"/>
                        <Grid>
                            <TextBlock Text="$" 
                                     VerticalAlignment="Center"
                                     Margin="10,0,0,0"
                                     FontSize="14"/>
                            <TextBox x:Name="SubtotalTextBox"
                                    Height="35"
                                    FontSize="14"
                                    Padding="25,0,5,0"
                                    TextChanged="SubtotalTextBox_TextChanged"/>
                        </Grid>
                    </StackPanel>

                    <StackPanel Grid.Column="2">
                        <TextBlock Text="TOTAL CON IVA" 
                                 FontSize="11"
                                 FontWeight="SemiBold"
                                 Margin="0,0,0,5"/>
                        <Border Background="#E8F5E9"
                               BorderBrush="#4CAF50"
                               BorderThickness="1"
                               Height="35">
                            <TextBlock x:Name="TotalTextBlock"
                                     Text="$ 0.00"
                                     VerticalAlignment="Center"
                                     Margin="10,0"
                                     FontSize="14"
                                     FontWeight="Bold"
                                     Foreground="#2E7D32"/>
                        </Border>
                    </StackPanel>

                    <StackPanel Grid.Column="4">
                        <TextBlock Text="% ORDEN" 
                                 FontSize="11"
                                 FontWeight="SemiBold"
                                 Foreground="#2E7D32"
                                 Margin="0,0,0,5"/>
                        <Grid>
                            <Slider x:Name="OrderPercentageSlider"
                                   Minimum="0"
                                   Maximum="100"
                                   Value="0"
                                   Height="35"
                                   VerticalAlignment="Center"
                                   ValueChanged="OrderPercentageSlider_ValueChanged"/>
                            <TextBlock x:Name="OrderPercentageText"
                                     Text="0%"
                                     HorizontalAlignment="Right"
                                     VerticalAlignment="Center"
                                     Margin="0,0,10,0"
                                     FontWeight="Bold"
                                     Foreground="#2E7D32"/>
                        </Grid>
                    </StackPanel>
                </Grid>

                <!-- Información de última modificación -->
                <Border Grid.Row="8"
                       Background="#FFF3E0"
                       Padding="10"
                       CornerRadius="5">
                    <StackPanel>
                        <TextBlock Text="📝 Información de Auditoría"
                                 FontWeight="Bold"
                                 FontSize="11"
                                 Margin="0,0,0,5"/>
                        <TextBlock x:Name="LastModifiedText"
                                 Text="Última modificación: -"
                                 FontSize="10"
                                 Foreground="#666"/>
                    </StackPanel>
                </Border>
            </Grid>
        </ScrollViewer>

        <!-- Botones de Acción -->
        <Border Grid.Row="2" 
               Background="#f5f5f5"
               BorderBrush="#DDD"
               BorderThickness="0,1,0,0">
            <Grid Margin="30,15">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <TextBlock Grid.Column="0"
                         x:Name="SaveStatusText"
                         Text=""
                         FontStyle="Italic"
                         FontSize="11"
                         Foreground="#666"
                         VerticalAlignment="Center"/>

                <Button Grid.Column="1"
                       x:Name="SaveButton"
                       Content="GUARDAR CAMBIOS"
                       Width="150"
                       Height="40"
                       Margin="0,0,10,0"
                       FontWeight="Bold"
                       Click="SaveButton_Click"
                       Cursor="Hand">
                    <Button.Template>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="border"
                                   Background="#4CAF50"
                                   CornerRadius="3">
                                <ContentPresenter HorizontalAlignment="Center"
                                                VerticalAlignment="Center"
                                                TextElement.Foreground="White"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="#45A049"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="#388E3C"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                </Button>

                <Button Grid.Column="2"
                       x:Name="CancelButton"
                       Content="CANCELAR"
                       Width="120"
                       Height="40"
                       Background="White"
                       BorderBrush="#999"
                       BorderThickness="1"
                       Click="CancelButton_Click"
                       Cursor="Hand"/>
            </Grid>
        </Border>
    </Grid>
</Window>


================================================
FILE: SistemaGestionProyectos2/Views/EditOrderWindow.xaml.cs
================================================
﻿using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using SistemaGestionProyectos2.Models;
using SistemaGestionProyectos2.Services;

namespace SistemaGestionProyectos2.Views
{
    public partial class EditOrderWindow : Window
    {
        private OrderViewModel _order;
        private UserSession _currentUser;
        private readonly SupabaseService _supabaseService;
        private List<OrderStatusDb> _orderStatuses;
        private bool _hasChanges = false;
        private OrderDb _originalOrderDb;

        public EditOrderWindow(OrderViewModel order, UserSession currentUser)
        {
            InitializeComponent();
            _order = order;
            _currentUser = currentUser;
            _supabaseService = SupabaseService.Instance;

            ConfigurePermissions();
            _ = LoadDataAsync();
        }

        private async Task LoadDataAsync()
        {
            try
            {
                SaveButton.IsEnabled = false;
                SaveButton.Content = "Cargando...";

                // Cargar estados desde Supabase
                _orderStatuses = await _supabaseService.GetOrderStatuses();

                // Cargar la orden original desde la BD para tener todos los campos
                _originalOrderDb = await _supabaseService.GetOrderById(_order.Id);

                if (_originalOrderDb == null)
                {
                    MessageBox.Show(
                        "No se pudo cargar la información de la orden.",
                        "Error",
                        MessageBoxButton.OK,
                        MessageBoxImage.Error);
                    this.Close();
                    return;
                }

                // Llenar el ComboBox de estados
                StatusComboBox.Items.Clear();
                foreach (var status in _orderStatuses.OrderBy(s => s.DisplayOrder))
                {
                    StatusComboBox.Items.Add(new ComboBoxItem { Content = status.Name, Tag = status.Id });
                }

                LoadOrderData();
            }
            catch (Exception ex)
            {
                MessageBox.Show(
                    $"Error al cargar datos:\n{ex.Message}",
                    "Error",
                    MessageBoxButton.OK,
                    MessageBoxImage.Error);
            }
            finally
            {
                SaveButton.IsEnabled = true;
                SaveButton.Content = "GUARDAR CAMBIOS";
            }
        }

        private void ConfigurePermissions()
        {
            // Configurar según el rol
            UserRoleText.Text = GetRoleDisplayName(_currentUser.Role);

            switch (_currentUser.Role)
            {
                case "coordinator":
                    // Coordinador: Solo puede editar Fecha Promesa, % Avance y Estatus
                    PermissionsText.Text = "Como Coordinador, puede editar: Fecha Promesa, % Avance y Estatus";

                    // Ocultar sección financiera
                    FinancialSection.Visibility = Visibility.Collapsed;
                    FinancialFields.Visibility = Visibility.Collapsed;
                    break;

                case "admin":
                    // Admin: Puede editar todo
                    PermissionsText.Text = "Como Administrador, puede editar todos los campos disponibles";
                    PermissionsNotice.Background = System.Windows.Media.Brushes.LightGreen;

                    // Mostrar sección financiera
                    FinancialSection.Visibility = Visibility.Visible;
                    FinancialFields.Visibility = Visibility.Visible;
                    break;

                default:
                    // No debería llegar aquí
                    MessageBox.Show("No tiene permisos para editar órdenes", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    this.Close();
                    break;
            }
        }

        private void LoadOrderData()
        {
            // Cargar datos de la orden
            OrderNumberHeader.Text = $" - #{_order.OrderNumber}";

            // Campos de solo lectura
            OrderNumberTextBox.Text = _order.OrderNumber;
            OrderDateTextBox.Text = _order.OrderDate.ToString("dd/MM/yyyy");
            ClientTextBox.Text = _order.ClientName;
            VendorTextBox.Text = _order.VendorName;
            DescriptionTextBox.Text = _order.Description;

            // Campos editables para todos
            PromiseDatePicker.SelectedDate = _order.PromiseDate;
            ProgressSlider.Value = _originalOrderDb?.ProgressPercentage ?? _order.ProgressPercentage;
            ProgressValueText.Text = $"{(int)ProgressSlider.Value}%";

            // Seleccionar el estado actual
            SelectComboBoxItemByTag(StatusComboBox, _originalOrderDb?.OrderStatus ?? 1);

            // Campos financieros (solo Admin)
            if (_currentUser.Role == "admin")
            {
                SubtotalTextBox.Text = _order.Subtotal.ToString("F2");
                TotalTextBlock.Text = _order.Total.ToString("C", new CultureInfo("es-MX"));
                OrderPercentageSlider.Value = _originalOrderDb?.OrderPercentage ?? _order.OrderPercentage;
                OrderPercentageText.Text = $"{(int)OrderPercentageSlider.Value}%";
            }

            // Información de auditoría
            LastModifiedText.Text = $"Última modificación: {DateTime.Now:dd/MM/yyyy HH:mm} - Editando como: {_currentUser.FullName}";
        }

        private void SelectComboBoxItemByTag(ComboBox comboBox, int statusId)
        {
            foreach (ComboBoxItem item in comboBox.Items)
            {
                if (item.Tag is int tagId && tagId == statusId)
                {
                    comboBox.SelectedItem = item;
                    break;
                }
            }
        }

        private string GetRoleDisplayName(string role)
        {
            switch (role)
            {
                case "admin": return "Administrador";
                case "coordinator": return "Coordinador";
                case "salesperson": return "Vendedor";
                default: return role;
            }
        }

        private void ProgressSlider_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            if (ProgressValueText != null)
            {
                ProgressValueText.Text = $"{(int)ProgressSlider.Value}%";
                _hasChanges = true;
                UpdateSaveStatus();
            }
        }

        private void OrderPercentageSlider_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            if (OrderPercentageText != null)
            {
                OrderPercentageText.Text = $"{(int)OrderPercentageSlider.Value}%";
                _hasChanges = true;
                UpdateSaveStatus();
            }
        }

        private void SubtotalTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (decimal.TryParse(SubtotalTextBox.Text, out decimal subtotal))
            {
                decimal total = subtotal * 1.16m;
                TotalTextBlock.Text = total.ToString("C", new CultureInfo("es-MX"));
                _hasChanges = true;
                UpdateSaveStatus();
            }
        }

        private void UpdateSaveStatus()
        {
            if (_hasChanges)
            {
                SaveStatusText.Text = "⚠ Hay cambios sin guardar";
                SaveStatusText.Foreground = System.Windows.Media.Brushes.Orange;
            }
        }

        private async void SaveButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                // Validar campos obligatorios
                if (!PromiseDatePicker.SelectedDate.HasValue)
                {
                    MessageBox.Show("La fecha promesa es obligatoria", "Validación", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                if (StatusComboBox.SelectedItem == null)
                {
                    MessageBox.Show("El estatus es obligatorio", "Validación", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                SaveButton.IsEnabled = false;
                SaveButton.Content = "GUARDANDO...";

                // Preparar la orden actualizada
                _originalOrderDb.EstDelivery = PromiseDatePicker.SelectedDate.Value;
                _originalOrderDb.ProgressPercentage = (int)ProgressSlider.Value;

                var selectedStatus = StatusComboBox.SelectedItem as ComboBoxItem;
                if (selectedStatus?.Tag is int statusId)
                {
                    _originalOrderDb.OrderStatus = statusId;
                }

                // Si es admin, actualizar campos financieros
                if (_currentUser.Role == "admin")
                {
                    if (decimal.TryParse(SubtotalTextBox.Text, out decimal subtotal))
                    {
                        _originalOrderDb.SaleSubtotal = subtotal;
                        _originalOrderDb.SaleTotal = subtotal * 1.16m;
                    }
                    _originalOrderDb.OrderPercentage = (int)OrderPercentageSlider.Value;
                }

                // Guardar en Supabase con el ID del usuario
                bool success = await _supabaseService.UpdateOrder(_originalOrderDb, _currentUser.Id);

                if (success)
                {
                    // Actualizar el objeto local para reflejar los cambios
                    _order.PromiseDate = _originalOrderDb.EstDelivery.Value;
                    _order.ProgressPercentage = _originalOrderDb.ProgressPercentage;

                    var statusName = _orderStatuses.FirstOrDefault(s => s.Id == _originalOrderDb.OrderStatus)?.Name;
                    _order.Status = statusName ?? "PENDIENTE";

                    if (_currentUser.Role == "admin")
                    {
                        _order.Subtotal = _originalOrderDb.SaleSubtotal ?? 0;
                        _order.Total = _originalOrderDb.SaleTotal ?? 0;
                        _order.OrderPercentage = _originalOrderDb.OrderPercentage;
                    }

                    // Mensaje más limpio y rápido
                    MessageBox.Show(
                        $"✅ Orden {_order.OrderNumber} actualizada correctamente",
                        "Éxito",
                        MessageBoxButton.OK,
                        MessageBoxImage.Information);

                    this.DialogResult = true;
                    this.Close();
                }
                else
                {
                    throw new Exception("No se pudo actualizar la orden en la base de datos");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(
                    $"Error al guardar los cambios:\n{ex.Message}",
                    "Error",
                    MessageBoxButton.OK,
                    MessageBoxImage.Error);

                System.Diagnostics.Debug.WriteLine($"Error completo: {ex}");
            }
            finally
            {
                SaveButton.IsEnabled = true;
                SaveButton.Content = "GUARDAR CAMBIOS";
            }
        }

        private void CancelButton_Click(object sender, RoutedEventArgs e)
        {
            if (_hasChanges)
            {
                var result = MessageBox.Show(
                    "Hay cambios sin guardar. ¿Está seguro que desea salir sin guardar?",
                    "Confirmar",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Question);

                if (result == MessageBoxResult.No)
                {
                    return;
                }
            }

            this.DialogResult = false;
            this.Close();
        }

        protected override void OnClosing(System.ComponentModel.CancelEventArgs e)
        {
            if (_hasChanges && DialogResult != true)
            {
                var result = MessageBox.Show(
                    "Hay cambios sin guardar. ¿Está seguro que desea salir?",
                    "Cambios sin guardar",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Warning);

                if (result == MessageBoxResult.No)
                {
                    e.Cancel = true;
                }
            }

            base.OnClosing(e);
        }

        // Detectar cambios en los campos
        private void PromiseDatePicker_SelectedDateChanged(object sender, SelectionChangedEventArgs e)
        {
            if (PromiseDatePicker.SelectedDate != _order.PromiseDate)
            {
                _hasChanges = true;
                UpdateSaveStatus();
            }
        }

        private void StatusComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _hasChanges = true;
            UpdateSaveStatus();
        }
    }
}


================================================
FILE: SistemaGestionProyectos2/Views/GanttView.xaml
================================================
﻿<UserControl x:Class="SistemaGestionProyectos2.Views.GanttView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Grid>
        <TextBlock Text="Vista Gantt - En construcción" 
                   HorizontalAlignment="Center" 
                   VerticalAlignment="Center"/>
    </Grid>
</UserControl>


================================================
FILE: SistemaGestionProyectos2/Views/GanttView.xaml.cs
================================================
﻿using System.Windows.Controls;

namespace SistemaGestionProyectos2.Views
{
    public partial class GanttView : UserControl
    {
        public GanttView()
        {
            InitializeComponent();
        }
    }
}


================================================
FILE: SistemaGestionProyectos2/Views/LoadingWindow.xaml
================================================
﻿<Window x:Class="SistemaGestionProyectos2.Views.LoadingWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Cargando..."
        Height="300"
        Width="500"
        WindowStartupLocation="CenterScreen"
        WindowStyle="None"
        AllowsTransparency="True"
        Background="Transparent"
        ShowInTaskbar="False"
        Topmost="True">

    <Border Background="White" 
            CornerRadius="15">
        <Border.Effect>
            <DropShadowEffect BlurRadius="30" 
                            Direction="270" 
                            Color="#000000" 
                            Opacity="0.3" 
                            ShadowDepth="10"/>
        </Border.Effect>

        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <!-- Logo IMA -->
            <Border Grid.Row="1" 
                   Width="200" 
                   Height="60"
                   Margin="0,0,0,20">
                <Grid>
                    <Rectangle Fill="Black" Width="200" Height="2" VerticalAlignment="Top"/>
                    <Rectangle Fill="Black" Width="2" Height="60" HorizontalAlignment="Left"/>
                    <Rectangle Fill="Black" Width="2" Height="60" HorizontalAlignment="Right"/>

                    <StackPanel Orientation="Horizontal" 
                               HorizontalAlignment="Center" 
                               VerticalAlignment="Center">
                        <TextBlock Text="I M A" 
                                 FontSize="32" 
                                 FontWeight="Bold"
                                 Foreground="Black"
                                 FontFamily="Arial Black"/>
                    </StackPanel>
                </Grid>
            </Border>

            <!-- Animación de carga -->
            <Grid Grid.Row="2" Height="60">
                <Canvas Width="100" Height="60">
                    <!-- Círculos animados -->
                    <Ellipse x:Name="Circle1" 
                           Width="12" Height="12" 
                           Fill="#2196F3"
                           Canvas.Left="20"
                           Canvas.Top="24">
                        <Ellipse.RenderTransform>
                            <ScaleTransform x:Name="Scale1" ScaleX="1" ScaleY="1" CenterX="6" CenterY="6"/>
                        </Ellipse.RenderTransform>
                    </Ellipse>

                    <Ellipse x:Name="Circle2" 
                           Width="12" Height="12" 
                           Fill="#2196F3"
                           Canvas.Left="44"
                           Canvas.Top="24">
                        <Ellipse.RenderTransform>
                            <ScaleTransform x:Name="Scale2" ScaleX="1" ScaleY="1" CenterX="6" CenterY="6"/>
                        </Ellipse.RenderTransform>
                    </Ellipse>

                    <Ellipse x:Name="Circle3" 
                           Width="12" Height="12" 
                           Fill="#2196F3"
                           Canvas.Left="68"
                           Canvas.Top="24">
                        <Ellipse.RenderTransform>
                            <ScaleTransform x:Name="Scale3" ScaleX="1" ScaleY="1" CenterX="6" CenterY="6"/>
                        </Ellipse.RenderTransform>
                    </Ellipse>
                </Canvas>

                <!-- Barra de progreso opcional -->
                <ProgressBar x:Name="LoadingProgress"
                           Width="300"
                           Height="4"
                           Margin="0,40,0,0"
                           Visibility="Collapsed">
                    <ProgressBar.Foreground>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                            <GradientStop Color="#2196F3" Offset="0"/>
                            <GradientStop Color="#1976D2" Offset="1"/>
                        </LinearGradientBrush>
                    </ProgressBar.Foreground>
                </ProgressBar>
            </Grid>

            <!-- Texto de estado -->
            <StackPanel Grid.Row="3" Margin="0,20,0,0">
                <TextBlock x:Name="LoadingTitle"
                         Text="Iniciando Sistema"
                         FontSize="16"
                         FontWeight="SemiBold"
                         HorizontalAlignment="Center"
                         Foreground="#333"
                         Margin="0,0,0,5"/>

                <TextBlock x:Name="LoadingMessage"
                         Text="Conectando con el servidor..."
                         FontSize="12"
                         HorizontalAlignment="Center"
                         Foreground="#666"/>

                <TextBlock x:Name="LoadingDetails"
                         Text=""
                         FontSize="10"
                         FontStyle="Italic"
                         HorizontalAlignment="Center"
                         Foreground="#999"
                         Margin="0,5,0,0"
                         Visibility="Collapsed"/>
            </StackPanel>
        </Grid>
    </Border>

    <Window.Triggers>
        <EventTrigger RoutedEvent="Loaded">
            <BeginStoryboard>
                <Storyboard RepeatBehavior="Forever">
                    <!-- Animación círculo 1 -->
                    <DoubleAnimation Storyboard.TargetName="Scale1"
                                   Storyboard.TargetProperty="ScaleX"
                                   From="1" To="1.5" Duration="0:0:0.6"
                                   AutoReverse="True"/>
                    <DoubleAnimation Storyboard.TargetName="Scale1"
                                   Storyboard.TargetProperty="ScaleY"
                                   From="1" To="1.5" Duration="0:0:0.6"
                                   AutoReverse="True"/>
                    <DoubleAnimation Storyboard.TargetName="Circle1"
                                   Storyboard.TargetProperty="Opacity"
                                   From="1" To="0.3" Duration="0:0:0.6"
                                   AutoReverse="True"/>

                    <!-- Animación círculo 2 con delay -->
                    <DoubleAnimation Storyboard.TargetName="Scale2"
                                   Storyboard.TargetProperty="ScaleX"
                                   From="1" To="1.5" Duration="0:0:0.6"
                                   BeginTime="0:0:0.2"
                                   AutoReverse="True"/>
                    <DoubleAnimation Storyboard.TargetName="Scale2"
                                   Storyboard.TargetProperty="ScaleY"
                                   From="1" To="1.5" Duration="0:0:0.6"
                                   BeginTime="0:0:0.2"
                                   AutoReverse="True"/>
                    <DoubleAnimation Storyboard.TargetName="Circle2"
                                   Storyboard.TargetProperty="Opacity"
                                   From="1" To="0.3" Duration="0:0:0.6"
                                   BeginTime="0:0:0.2"
                                   AutoReverse="True"/>

                    <!-- Animación círculo 3 con más delay -->
                    <DoubleAnimation Storyboard.TargetName="Scale3"
                                   Storyboard.TargetProperty="ScaleX"
                                   From="1" To="1.5" Duration="0:0:0.6"
                                   BeginTime="0:0:0.4"
                                   AutoReverse="True"/>
                    <DoubleAnimation Storyboard.TargetName="Scale3"
                                   Storyboard.TargetProperty="ScaleY"
                                   From="1" To="1.5" Duration="0:0:0.6"
                                   BeginTime="0:0:0.4"
                                   AutoReverse="True"/>
                    <DoubleAnimation Storyboard.TargetName="Circle3"
                                   Storyboard.TargetProperty="Opacity"
                                   From="1" To="0.3" Duration="0:0:0.6"
                                   BeginTime="0:0:0.4"
                                   AutoReverse="True"/>
                </Storyboard>
            </BeginStoryboard>
        </EventTrigger>
    </Window.Triggers>
</Window>


================================================
FILE: SistemaGestionProyectos2/Views/LoadingWindow.xaml.cs
================================================
﻿using System;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Threading;

namespace SistemaGestionProyectos2.Views
{
    public partial class LoadingWindow : Window
    {
        private DispatcherTimer _timer;
        private int _dotsCount = 0;

        public LoadingWindow()
        {
            InitializeComponent();
            StartDotsAnimation();
        }

        // Métodos para actualizar el estado de carga
        public void UpdateStatus(string title, string message, string details = null)
        {
            Dispatcher.Invoke(() =>
            {
                LoadingTitle.Text = title;
                LoadingMessage.Text = message;

                if (!string.IsNullOrEmpty(details))
                {
                    LoadingDetails.Text = details;
                    LoadingDetails.Visibility = Visibility.Visible;
                }
                else
                {
                    LoadingDetails.Visibility = Visibility.Collapsed;
                }
            });
        }

        public void ShowProgress(bool show, double value = 0)
        {
            Dispatcher.Invoke(() =>
            {
                if (show)
                {
                    LoadingProgress.Visibility = Visibility.Visible;
                    LoadingProgress.IsIndeterminate = value == 0;
                    if (value > 0)
                    {
                        LoadingProgress.Value = value;
                    }
                }
                else
                {
                    LoadingProgress.Visibility = Visibility.Collapsed;
                }
            });
        }

        private void StartDotsAnimation()
        {
            _timer = new DispatcherTimer();
            _timer.Interval = TimeSpan.FromMilliseconds(500);
            _timer.Tick += (s, e) =>
            {
                _dotsCount = (_dotsCount + 1) % 4;
                string dots = new string('.', _dotsCount);

                if (LoadingMessage.Text.Contains("..."))
                {
                    var baseText = LoadingMessage.Text.Replace("...", "").Replace("..", "").Replace(".", "");
                    LoadingMessage.Text = baseText + dots;
                }
            };
            _timer.Start();
        }

        protected override void OnClosed(EventArgs e)
        {
            _timer?.Stop();
            base.OnClosed(e);
        }

        // Método helper para cerrar con fade out
        public async Task CloseWithFade()
        {
            var fadeOutDuration = TimeSpan.FromMilliseconds(300);
            var steps = 10;
            var stepDuration = fadeOutDuration.TotalMilliseconds / steps;

            for (int i = steps; i >= 0; i--)
            {
                this.Opacity = (double)i / steps;
                await Task.Delay((int)stepDuration);
            }

            this.Close();
        }
    }
}


================================================
FILE: SistemaGestionProyectos2/Views/LoginWindow.xaml
================================================
﻿<Window x:Class="SistemaGestionProyectos2.Views.LoginWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="IMA Mecatrónica - Sistema de Gestión" 
        Height="600" 
        Width="450"
        WindowStartupLocation="CenterScreen"
        ResizeMode="NoResize"
        WindowStyle="None"
        AllowsTransparency="True"
        Background="Transparent">

    <Border Background="White" 
            CornerRadius="20">
        <Border.Effect>
            <DropShadowEffect BlurRadius="30" 
                            Direction="270" 
                            Color="#000000" 
                            Opacity="0.2" 
                            ShadowDepth="10"/>
        </Border.Effect>

        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="40"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <!-- Barra de título personalizada -->
            <Border Grid.Row="0" 
                    Background="Black"
                    CornerRadius="20,20,0,0"
                    MouseLeftButtonDown="TitleBar_MouseLeftButtonDown">
                <Grid>
                    <StackPanel Orientation="Horizontal" 
                               VerticalAlignment="Center"
                               Margin="15,0,0,0">
                        <TextBlock Text="⚙" 
                                 Foreground="White"
                                 FontSize="16"
                                 Margin="0,0,10,0"/>
                        <TextBlock Text="SISTEMA DE GESTIÓN" 
                                 Foreground="White"
                                 VerticalAlignment="Center"
                                 FontWeight="Medium"
                                 FontSize="12"/>
                    </StackPanel>

                    <!-- Botones de ventana -->
                    <StackPanel Orientation="Horizontal" 
                              HorizontalAlignment="Right"
                              Margin="0,0,10,0">
                        <Button Content="─" 
                              Click="MinimizeButton_Click"
                              Width="30" 
                              Height="30"
                              Background="Transparent"
                              BorderThickness="0"
                              Foreground="White"
                              FontSize="16"
                              Cursor="Hand"/>
                        <Button Content="✕" 
                              Click="CloseButton_Click"
                              Width="30" 
                              Height="30"
                              Background="Transparent"
                              BorderThickness="0"
                              Foreground="White"
                              FontSize="14"
                              Cursor="Hand"/>
                    </StackPanel>
                </Grid>
            </Border>

            <!-- Contenido del Login -->
            <Grid Grid.Row="1" Margin="50,40,50,40">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <!-- Logo IMA -->
                <Border Grid.Row="0" 
                       Width="280" 
                       Height="80"
                       Margin="0,0,0,30">
                    <Grid>
                        <Rectangle Fill="Black" Width="280" Height="2" VerticalAlignment="Top"/>
                        <Rectangle Fill="Black" Width="2" Height="80" HorizontalAlignment="Left"/>
                        <Rectangle Fill="Black" Width="2" Height="80" HorizontalAlignment="Right"/>

                        <StackPanel Orientation="Horizontal" 
                                   HorizontalAlignment="Center" 
                                   VerticalAlignment="Center">
                            <TextBlock Text="I M A" 
                                     FontSize="42" 
                                     FontWeight="Bold"
                                     Foreground="Black"
                                     FontFamily="Arial Black"
                                     Margin="10,0,30,0"/>
                            <StackPanel VerticalAlignment="Center">
                                <TextBlock Text="MECATRÓNICA" 
                                         FontSize="18" 
                                         FontWeight="Medium"
                                         Foreground="Black"/>
                                <TextBlock Text="Desarrollo de Ingeniería" 
                                         FontSize="10" 
                                         FontStyle="Italic"
                                         Foreground="#666"
                                         Margin="0,2,0,0"/>
                            </StackPanel>
                        </StackPanel>
                    </Grid>
                </Border>

                <!-- Título -->
                <TextBlock Grid.Row="1" 
                         Text="MÓDULO DE CONTROL" 
                         FontSize="24" 
                         FontWeight="Bold"
                         HorizontalAlignment="Center"
                         Foreground="Black"
                         Margin="0,0,0,10"/>

                <TextBlock Grid.Row="2" 
                         Text="Ingrese sus credenciales de acceso" 
                         FontSize="12"
                         HorizontalAlignment="Center"
                         Foreground="#666"
                         Margin="0,0,0,30"/>

                <!-- Campo de Usuario -->
                <Grid Grid.Row="3" Margin="0,0,0,20">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <TextBlock Text="USUARIO" 
                             FontSize="11"
                             FontWeight="Bold"
                             Foreground="Black"
                             Margin="0,0,0,8"/>

                    <Border Grid.Row="1" 
                          BorderBrush="Black" 
                          BorderThickness="2" 
                          CornerRadius="0"
                          Height="45"
                          Background="#F5F5F5">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="45"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <Border Background="Black" Width="45">
                                <TextBlock Text="👤" 
                                         FontSize="18"
                                         HorizontalAlignment="Center"
                                         VerticalAlignment="Center"
                                         Foreground="White"/>
                            </Border>

                            <TextBox Grid.Column="1" 
                                   x:Name="UsernameTextBox"
                                   VerticalAlignment="Center"
                                   BorderThickness="0"
                                   Background="Transparent"
                                   FontSize="14"
                                   Margin="10,0"
                                   Text="admin"/>
                        </Grid>
                    </Border>
                </Grid>

                <!-- Campo de Contraseña -->
                <Grid Grid.Row="4" Margin="0,0,0,25">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <TextBlock Text="CONTRASEÑA" 
                             FontSize="11"
                             FontWeight="Bold"
                             Foreground="Black"
                             Margin="0,0,0,8"/>

                    <Border Grid.Row="1" 
                          BorderBrush="Black" 
                          BorderThickness="2" 
                          CornerRadius="0"
                          Height="45"
                          Background="#F5F5F5">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="45"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <Border Background="Black" Width="45">
                                <TextBlock Text="🔒" 
                                         FontSize="18"
                                         HorizontalAlignment="Center"
                                         VerticalAlignment="Center"
                                         Foreground="White"/>
                            </Border>

                            <PasswordBox Grid.Column="1" 
                                       x:Name="PasswordBox"
                                       VerticalAlignment="Center"
                                       BorderThickness="0"
                                       Background="Transparent"
                                       FontSize="14"
                                       Margin="10,0"
                                       Password="admin123"/>
                        </Grid>
                    </Border>
                </Grid>

                

                <!-- Botón de Login -->
                <Button Grid.Row="6" 
                       x:Name="LoginButton"
                       Height="50"
                       Click="LoginButton_Click"
                       Cursor="Hand"
                       Margin="0,0,0,15">
                    <Button.Template>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="border"
                                  Background="Black"
                                  CornerRadius="0">
                                <ContentPresenter HorizontalAlignment="Center"
                                                VerticalAlignment="Center"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" 
                                          Property="Background" 
                                          Value="#333"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="border" 
                                          Property="Background" 
                                          Value="#555"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="▶" 
                                 FontSize="16" 
                                 Margin="0,0,15,0"
                                 Foreground="White"/>
                        <TextBlock Text="INICIAR SESIÓN" 
                                 Foreground="White"
                                 FontWeight="Bold"
                                 FontSize="14"
                                 VerticalAlignment="Center"/>
                    </StackPanel>
                </Button>
                <!-- Agregar este botón después del botón de INICIAR SESIÓN -->
                <Button Grid.Row="7" 
       x:Name="TestConnectionButton"
       Height="35"
       Click="TestConnectionButton_Click"
       Cursor="Hand"
       Margin="0,10,0,0">
                    <Button.Template>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="border"
                   Background="Transparent"
                   BorderBrush="#999"
                   BorderThickness="1"
                   CornerRadius="3">
                                <ContentPresenter HorizontalAlignment="Center"
                                VerticalAlignment="Center"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" Property="BorderBrush" Value="#2196F3"/>
                                    <Setter TargetName="border" Property="Background" Value="#E3F2FD"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="🔌" 
                 FontSize="14" 
                 Margin="0,0,8,0"
                 Foreground="#666"/>
                        <TextBlock Text="Test Conexión Supabase" 
                 Foreground="#666"
                 FontSize="12"
                 VerticalAlignment="Center"/>
                    </StackPanel>
                </Button>

                <!-- Estado de Conexión -->
                <Grid Grid.Row="8" 
                     VerticalAlignment="Bottom">
                    <!-- Loading -->
                    <Border x:Name="LoadingPanel"
                          Background="#F0F0F0"
                          CornerRadius="5"
                          Padding="10"
                          Visibility="Collapsed">
                        <StackPanel Orientation="Horizontal" 
                                  HorizontalAlignment="Center">
                            <TextBlock Text="⏳" 
                                     FontSize="16"
                                     Margin="0,0,10,0"
                                     Foreground="#666">
                                <TextBlock.RenderTransform>
                                    <RotateTransform x:Name="LoadingRotation" Angle="0" CenterX="8" CenterY="8"/>
                                </TextBlock.RenderTransform>
                            </TextBlock>
                            <TextBlock x:Name="LoadingText"
                                     Text="Verificando credenciales..."
                                     Foreground="#666"
                                     FontSize="12"/>
                        </StackPanel>
                    </Border>

                    <!-- Mensaje de Estado -->
                    <Border x:Name="StatusPanel"
                          CornerRadius="5"
                          Padding="10"
                          Visibility="Collapsed">
                        <StackPanel Orientation="Horizontal" 
                                  HorizontalAlignment="Center">
                            <TextBlock x:Name="StatusIcon"
                                     FontSize="16"
                                     Margin="0,0,10,0"/>
                            <TextBlock x:Name="StatusText"
                                     FontSize="12"/>
                        </StackPanel>
                    </Border>
                </Grid>
            </Grid>
        </Grid>
    </Border>
</Window>


================================================
FILE: SistemaGestionProyectos2/Views/LoginWindow.xaml.cs
================================================
﻿using System;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Threading.Tasks;
using SistemaGestionProyectos2.Services;
using SistemaGestionProyectos2.Models;

namespace SistemaGestionProyectos2.Views
{
    public partial class LoginWindow : Window
    {
        private readonly SupabaseService _supabaseService;

        public LoginWindow()
        {
            try
            {
                InitializeComponent();
                _supabaseService = SupabaseService.Instance;

                // Quitar valores por defecto en producción
                UsernameTextBox.Text = "";
                PasswordBox.Password = "";

                // Enfocar el campo de usuario
                UsernameTextBox.Focus();
            }
            catch (Exception ex)
            {
                MessageBox.Show(
                    $"Error inicializando conexión con base de datos:\n{ex.Message}\n\n" +
                    "Verifique su conexión a internet y configuración.",
                    "Error de Inicialización",
                    MessageBoxButton.OK,
                    MessageBoxImage.Error);
            }
        }

        // Mover ventana
        private void TitleBar_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (e.LeftButton == MouseButtonState.Pressed)
                DragMove();
        }

        // Minimizar ventana
        private void MinimizeButton_Click(object sender, RoutedEventArgs e)
        {
            WindowState = WindowState.Minimized;
        }

        // Cerrar aplicación
        private void CloseButton_Click(object sender, RoutedEventArgs e)
        {
            var result = MessageBox.Show(
                "¿Está seguro que desea salir del sistema?",
                "IMA Mecatrónica",
                MessageBoxButton.YesNo,
                MessageBoxImage.Question);

            if (result == MessageBoxResult.Yes)
            {
                Application.Current.Shutdown();
            }
        }

        // Botón de Login - AHORA CON SUPABASE
        private async void LoginButton_Click(object sender, RoutedEventArgs e)
        {
            // Validación
            if (string.IsNullOrWhiteSpace(UsernameTextBox.Text) ||
                string.IsNullOrWhiteSpace(PasswordBox.Password))
            {
                ShowStatus("⚠️", "Por favor complete todos los campos", "#FFA726", false);
                return;
            }

            ShowLoading("Verificando credenciales...");
            DisableControls();

            try
            {
                string username = UsernameTextBox.Text.Trim();
                string password = PasswordBox.Password;

                // AUTENTICACIÓN CON SUPABASE
                var (success, user, message) = await _supabaseService.AuthenticateUser(username, password);

                if (success && user != null)
                {
                    ShowStatus("✅", "Acceso autorizado", "#4CAF50", true);
                    await Task.Delay(500);

                    // Crear sesión de usuario
                    var currentUser = new UserSession
                    {
                        Id = user.Id,
                        Username = user.Username,
                        FullName = user.FullName,
                        Role = user.Role,
                        LoginTime = DateTime.Now
                    };

                    // Log para debug
                    System.Diagnostics.Debug.WriteLine($"✅ Login exitoso: {user.FullName} ({user.Role})");

                    // Crear ventana de carga
                    var loadingWindow = new LoadingWindow();
                    loadingWindow.Show();
                    this.Hide();

                    // Simular carga
                    loadingWindow.UpdateStatus("Preparando Sistema", $"Bienvenido {user.FullName}");
                    await Task.Delay(800);

                    loadingWindow.UpdateStatus("Cargando Módulos", "Configurando permisos...");
                    await Task.Delay(600);

                    // Abrir menú principal
                    MainMenuWindow mainMenu = new MainMenuWindow(currentUser);
                    mainMenu.Show();

                    await loadingWindow.CloseWithFade();
                    this.Close();
                }
                else
                {
                    ShowStatus("❌", message ?? "Credenciales incorrectas", "#F44336", false);

                    // Mostrar mensaje más visible
                    MessageBox.Show(
                        message ?? "Usuario o contraseña incorrectos.\n\nPor favor verifique sus credenciales.",
                        "Error de Autenticación",
                        MessageBoxButton.OK,
                        MessageBoxImage.Warning);

                    // Limpiar contraseña
                    PasswordBox.Clear();
                    PasswordBox.Focus();
                }
            }
            catch (Exception ex)
            {
                ShowStatus("⚠️", "Error de conexión", "#F44336", false);

                MessageBox.Show(
                    "No se pudo conectar con el servidor.\n\n" +
                    "Posibles causas:\n" +
                    "• Sin conexión a internet\n" +
                    "• Servidor no disponible\n" +
                    "• Error en configuración\n\n" +
                    $"Detalles: {ex.Message}",
                    "Error de Conexión",
                    MessageBoxButton.OK,
                    MessageBoxImage.Error);

                System.Diagnostics.Debug.WriteLine($"Error completo: {ex}");
            }
            finally
            {
                EnableControls();
            }
        }

        // Helpers para UI
        private void ShowLoading(string message)
        {
            LoadingText.Text = message;
            LoadingPanel.Visibility = Visibility.Visible;
            StatusPanel.Visibility = Visibility.Collapsed;
        }

        private void ShowStatus(string icon, string message, string colorHex, bool isSuccess)
        {
            LoadingPanel.Visibility = Visibility.Collapsed;
            StatusPanel.Visibility = Visibility.Visible;

            StatusIcon.Text = icon;
            StatusText.Text = message;

            var color = (Color)ColorConverter.ConvertFromString(colorHex);
            var brush = new SolidColorBrush(color);

            StatusIcon.Foreground = brush;
            StatusText.Foreground = brush;
            StatusPanel.Background = new SolidColorBrush(Color.FromArgb(20, color.R, color.G, color.B));
        }

        private void DisableControls()
        {
            UsernameTextBox.IsEnabled = false;
            PasswordBox.IsEnabled = false;
            LoginButton.IsEnabled = false;
            TestConnectionButton.IsEnabled = false;
        }

        private void EnableControls()
        {
            UsernameTextBox.IsEnabled = true;
            PasswordBox.IsEnabled = true;
            LoginButton.IsEnabled = true;
            TestConnectionButton.IsEnabled = true;
        }

        // Permitir login con Enter
        protected override void OnKeyDown(KeyEventArgs e)
        {
            if (e.Key == Key.Return && LoginButton.IsEnabled)
            {
                LoginButton_Click(this, new RoutedEventArgs());
            }
            base.OnKeyDown(e);
        }

        // Botón de test de conexión
        private async void TestConnectionButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                DisableControls();
                ShowLoading("Probando conexión con Supabase...");

                // Intentar obtener clientes como prueba
                var clients = await _supabaseService.GetClients();

                if (clients != null)
                {
                    ShowStatus("✅", $"Conexión exitosa - {clients.Count} clientes en BD", "#4CAF50", true);
                }
                else
                {
                    ShowStatus("⚠️", "Conexión establecida pero sin datos", "#FFA726", false);
                }

                await Task.Delay(2000);
                LoadingPanel.Visibility = Visibility.Collapsed;
                StatusPanel.Visibility = Visibility.Collapsed;
            }
            catch (Exception ex)
            {
                ShowStatus("❌", $"Error: {ex.Message}", "#F44336", false);
            }
            finally
            {
                EnableControls();
            }
        }
    }
}


================================================
FILE: SistemaGestionProyectos2/Views/MainMenuWindow.xaml
================================================
﻿<Window x:Class="SistemaGestionProyectos2.Views.MainMenuWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="IMA Mecatrónica - Módulo de Control" 
        Height="700" 
        Width="1200"
        WindowStartupLocation="CenterScreen"
        WindowState="Maximized">

    <Grid>
        <!-- Fondo con gradiente -->
        <Grid.Background>
            <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                <GradientStop Color="#1a1a1a" Offset="0"/>
                <GradientStop Color="#2d2d2d" Offset="1"/>
            </LinearGradientBrush>
        </Grid.Background>

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="30"/>
        </Grid.RowDefinitions>

        <!-- Barra Superior -->
        <Border Grid.Row="0" 
                Background="Black" 
                Height="50">
            <Grid>
                <StackPanel Orientation="Horizontal" 
                           VerticalAlignment="Center"
                           Margin="20,0">
                    <!-- Logo IMA -->
                    <Border Width="120" Height="35" Margin="0,0,30,0">
                        <Grid>
                            <Rectangle Stroke="White" StrokeThickness="1.5"/>
                            <StackPanel Orientation="Horizontal" 
                                       HorizontalAlignment="Center" 
                                       VerticalAlignment="Center">
                                <TextBlock Text="IMA" 
                                         FontSize="20" 
                                         FontWeight="Bold"
                                         Foreground="White"
                                         FontFamily="Arial Black"
                                         Margin="5,0"/>
                            </StackPanel>
                        </Grid>
                    </Border>

                    <TextBlock Text="MÓDULO DE CONTROL" 
                             Foreground="White"
                             FontSize="24"
                             FontWeight="Bold"
                             VerticalAlignment="Center"/>
                </StackPanel>

                <!-- Info de Usuario -->
                <StackPanel Orientation="Horizontal" 
                           HorizontalAlignment="Right"
                           VerticalAlignment="Center"
                           Margin="0,0,20,0">
                    <TextBlock Text="👤" 
                             Foreground="White"
                             FontSize="16"
                             Margin="0,0,10,0"/>
                    <TextBlock x:Name="UserInfoText" 
                             Text="Usuario: Admin"
                             Foreground="White"
                             VerticalAlignment="Center"
                             Margin="0,0,20,0"/>
                    <Button Content="⚙" 
                           Width="30" 
                           Height="30"
                           Background="Transparent"
                           BorderThickness="0"
                           Foreground="White"
                           FontSize="18"
                           Cursor="Hand"
                           ToolTip="Configuración"/>
                    <Button Content="🚪" 
                           Click="LogoutButton_Click"
                           Width="30" 
                           Height="30"
                           Background="Transparent"
                           BorderThickness="0"
                           Foreground="White"
                           FontSize="16"
                           Cursor="Hand"
                           ToolTip="Cerrar Sesión"/>
                </StackPanel>
            </Grid>
        </Border>

        <!-- Subtítulo -->
        <TextBlock Grid.Row="1" 
                   Text="MECATRÓNICA - Desarrollo de Ingeniería"
                   Foreground="#888"
                   FontStyle="Italic"
                   FontSize="12"
                   Margin="20,10"
                   HorizontalAlignment="Center"/>

        <!-- Área Principal con Módulos -->
        <Grid Grid.Row="2" Margin="40,20">
            <!-- Panel de Módulos estilo Access -->
            <ScrollViewer HorizontalScrollBarVisibility="Disabled" 
                         VerticalScrollBarVisibility="Auto">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <!-- Fila Superior de Módulos -->
                    <WrapPanel Grid.Row="0" 
                              HorizontalAlignment="Center"
                              Margin="0,20">

                        <!-- MANEJO DE ÓRDENES -->
                        <Button x:Name="OrdersModuleButton"
                               Click="OrdersModule_Click"
                               Width="200"
                               Height="120"
                               Margin="15"
                               Cursor="Hand">
                            <Button.Template>
                                <ControlTemplate TargetType="Button">
                                    <Border x:Name="border"
                                           Background="#E3F2FD"
                                           BorderBrush="#1976D2"
                                           BorderThickness="2"
                                           CornerRadius="5">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>

                                            <TextBlock Text="📋" 
                                                     FontSize="36"
                                                     HorizontalAlignment="Center"
                                                     VerticalAlignment="Center"
                                                     Foreground="#1976D2"/>

                                            <TextBlock Grid.Row="1"
                                                     Text="MANEJO DE ÓRDENES"
                                                     FontWeight="Bold"
                                                     FontSize="12"
                                                     HorizontalAlignment="Center"
                                                     Foreground="#1976D2"
                                                     Margin="0,5,0,10"/>
                                        </Grid>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="border" Property="Background" Value="#BBDEFB"/>
                                            <Setter TargetName="border" Property="BorderThickness" Value="3"/>
                                        </Trigger>
                                        <Trigger Property="IsPressed" Value="True">
                                            <Setter TargetName="border" Property="Background" Value="#90CAF9"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>

                        <!-- BALANCE -->
                        <Button IsEnabled="False"
                               Width="200"
                               Height="120"
                               Margin="15">
                            <Button.Template>
                                <ControlTemplate TargetType="Button">
                                    <Border Background="#F5F5F5"
                                           BorderBrush="#999"
                                           BorderThickness="2"
                                           CornerRadius="5"
                                           Opacity="0.6">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>

                                            <TextBlock Text="💰" 
                                                     FontSize="36"
                                                     HorizontalAlignment="Center"
                                                     VerticalAlignment="Center"
                                                     Foreground="#999"/>

                                            <StackPanel Grid.Row="1" HorizontalAlignment="Center">
                                                <TextBlock Text="BALANCE"
                                                         FontWeight="Bold"
                                                         FontSize="12"
                                                         HorizontalAlignment="Center"
                                                         Foreground="#999"/>
                                                <TextBlock Text="(Próximamente)"
                                                         FontSize="9"
                                                         FontStyle="Italic"
                                                         HorizontalAlignment="Center"
                                                         Foreground="#999"
                                                         Margin="0,0,0,10"/>
                                            </StackPanel>
                                        </Grid>
                                    </Border>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>

                        <!-- PORTAL DE CLIENTE -->
                        <Button IsEnabled="False"
                               Width="200"
                               Height="120"
                               Margin="15">
                            <Button.Template>
                                <ControlTemplate TargetType="Button">
                                    <Border Background="#F5F5F5"
                                           BorderBrush="#999"
                                           BorderThickness="2"
                                           CornerRadius="5"
                                           Opacity="0.6">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>

                                            <TextBlock Text="👥" 
                                                     FontSize="36"
                                                     HorizontalAlignment="Center"
                                                     VerticalAlignment="Center"
                                                     Foreground="#999"/>

                                            <StackPanel Grid.Row="1" HorizontalAlignment="Center">
                                                <TextBlock Text="PORTAL DE CLIENTE"
                                                         FontWeight="Bold"
                                                         FontSize="12"
                                                         HorizontalAlignment="Center"
                                                         Foreground="#999"/>
                                                <TextBlock Text="(Próximamente)"
                                                         FontSize="9"
                                                         FontStyle="Italic"
                                                         HorizontalAlignment="Center"
                                                         Foreground="#999"
                                                         Margin="0,0,0,10"/>
                                            </StackPanel>
                                        </Grid>
                                    </Border>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                    </WrapPanel>

                    <!-- Fila Inferior de Módulos -->
                    <WrapPanel Grid.Row="1" 
                              HorizontalAlignment="Center"
                              Margin="0,0,0,20">

                        <!-- INGRESOS PENDIENTES -->
                        <Button IsEnabled="False"
                               Width="200"
                               Height="120"
                               Margin="15">
                            <Button.Template>
                                <ControlTemplate TargetType="Button">
                                    <Border Background="#F5F5F5"
                                           BorderBrush="#999"
                                           BorderThickness="2"
                                           CornerRadius="5"
                                           Opacity="0.6">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>

                                            <TextBlock Text="📊" 
                                                     FontSize="36"
                                                     HorizontalAlignment="Center"
                                                     VerticalAlignment="Center"
                                                     Foreground="#999"/>

                                            <StackPanel Grid.Row="1" HorizontalAlignment="Center">
                                                <TextBlock Text="INGRESOS PENDIENTES"
                                                         FontWeight="Bold"
                                                         FontSize="12"
                                                         HorizontalAlignment="Center"
                                                         Foreground="#999"/>
                                                <TextBlock Text="(Próximamente)"
                                                         FontSize="9"
                                                         FontStyle="Italic"
                                                         HorizontalAlignment="Center"
                                                         Foreground="#999"
                                                         Margin="0,0,0,10"/>
                                            </StackPanel>
                                        </Grid>
                                    </Border>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>

                        <!-- PORTAL DE PROVEEDORES -->
                        <Button IsEnabled="False"
                               Width="200"
                               Height="120"
                               Margin="15">
                            <Button.Template>
                                <ControlTemplate TargetType="Button">
                                    <Border Background="#F5F5F5"
                                           BorderBrush="#999"
                                           BorderThickness="2"
                                           CornerRadius="5"
                                           Opacity="0.6">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>

                                            <TextBlock Text="🚚" 
                                                     FontSize="36"
                                                     HorizontalAlignment="Center"
                                                     VerticalAlignment="Center"
                                                     Foreground="#999"/>

                                            <StackPanel Grid.Row="1" HorizontalAlignment="Center">
                                                <TextBlock Text="PORTAL DE PROVEEDORES"
                                                         FontWeight="Bold"
                                                         FontSize="12"
                                                         HorizontalAlignment="Center"
                                                         Foreground="#999"/>
                                                <TextBlock Text="(Próximamente)"
                                                         FontSize="9"
                                                         FontStyle="Italic"
                                                         HorizontalAlignment="Center"
                                                         Foreground="#999"
                                                         Margin="0,0,0,10"/>
                                            </StackPanel>
                                        </Grid>
                                    </Border>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>

                        <!-- NÓMINA Y GASTOS FIJOS -->
                        <Button IsEnabled="False"
                               Width="200"
                               Height="120"
                               Margin="15">
                            <Button.Template>
                                <ControlTemplate TargetType="Button">
                                    <Border Background="#F5F5F5"
                                           BorderBrush="#999"
                                           BorderThickness="2"
                                           CornerRadius="5"
                                           Opacity="0.6">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>

                                            <TextBlock Text="💳" 
                                                     FontSize="36"
                                                     HorizontalAlignment="Center"
                                                     VerticalAlignment="Center"
                                                     Foreground="#999"/>

                                            <StackPanel Grid.Row="1" HorizontalAlignment="Center">
                                                <TextBlock Text="NÓMINA Y GASTOS FIJOS"
                                                         FontWeight="Bold"
                                                         FontSize="12"
                                                         HorizontalAlignment="Center"
                                                         Foreground="#999"/>
                                                <TextBlock Text="(Próximamente)"
                                                         FontSize="9"
                                                         FontStyle="Italic"
                                                         HorizontalAlignment="Center"
                                                         Foreground="#999"
                                                         Margin="0,0,0,10"/>
                                            </StackPanel>
                                        </Grid>
                                    </Border>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                    </WrapPanel>
                </Grid>
            </ScrollViewer>

            <!-- Fondo decorativo opcional (comentado por ahora) -->
            <!-- Si deseas agregar una imagen de fondo más adelante:
            <Image Source="pack://application:,,,/Resources/circuit_board.png"
                   Opacity="0.05"
                   Stretch="UniformToFill"
                   IsHitTestVisible="False"/>
            -->
        </Grid>

        <!-- Barra de Estado -->
        <StatusBar Grid.Row="3" Background="Black">
            <StatusBarItem>
                <TextBlock x:Name="StatusText" 
                         Text="Sistema listo" 
                         Foreground="White"/>
            </StatusBarItem>
            <StatusBarItem HorizontalAlignment="Right">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="🕐" 
                             Foreground="White"
                             Margin="0,0,5,0"/>
                    <TextBlock x:Name="TimeText" 
                             Text="00:00:00" 
                             Foreground="White"
                             Margin="0,0,20,0"/>
                    <TextBlock x:Name="RoleText" 
                             Text="Rol: Administrador" 
                             Foreground="White"/>
                </StackPanel>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>


================================================
FILE: SistemaGestionProyectos2/Views/MainMenuWindow.xaml.cs
================================================
﻿using System;
using System.Windows;
using System.Windows.Threading;
using SistemaGestionProyectos2.Models;

namespace SistemaGestionProyectos2.Views
{
    public partial class MainMenuWindow : Window
    {
        private UserSession _currentUser;
        private DispatcherTimer _timer;

        // Constructor que recibe UserSession
        public MainMenuWindow(UserSession user)
        {
            InitializeComponent();
            _currentUser = user;

            InitializeUI();
            StartClock();
            ConfigurePermissions();
        }

        // Constructor sin parámetros (para compatibilidad)
        public MainMenuWindow()
        {
            InitializeComponent();
            _currentUser = new UserSession
            {
                Username = "default",
                FullName = "Usuario",
                Role = "admin",
                LoginTime = DateTime.Now
            };

            InitializeUI();
            StartClock();
            ConfigurePermissions();
        }

        private void InitializeUI()
        {
            // Configurar información del usuario
            UserInfoText.Text = $"Usuario: {_currentUser.FullName}";
            RoleText.Text = $"Rol: {GetRoleDisplayName(_currentUser.Role)}";

            // Título de la ventana
            this.Title = $"IMA Mecatrónica - {_currentUser.FullName}";
        }

        private void ConfigurePermissions()
        {
            // Configurar permisos según el rol
            switch (_currentUser.Role)
            {
                case "admin":
                    // Admin tiene acceso a todo
                    OrdersModuleButton.IsEnabled = true;
                    break;

                case "coordinator":
                    // Coordinador tiene acceso al módulo de órdenes
                    OrdersModuleButton.IsEnabled = true;
                    break;

                case "salesperson":
                    // Vendedor NO tiene acceso al módulo de órdenes
                    OrdersModuleButton.IsEnabled = false;
                    OrdersModuleButton.Opacity = 0.5;
                    OrdersModuleButton.ToolTip = "No tiene permisos para acceder a este módulo";
                    break;
            }
        }

        private string GetRoleDisplayName(string role)
        {
            switch (role)
            {
                case "admin": return "Administrador";
                case "coordinator": return "Coordinador";
                case "salesperson": return "Vendedor";
                default: return role;
            }
        }

        private void StartClock()
        {
            _timer = new DispatcherTimer();
            _timer.Interval = TimeSpan.FromSeconds(1);
            _timer.Tick += (s, e) =>
            {
                TimeText.Text = DateTime.Now.ToString("HH:mm:ss");
            };
            _timer.Start();
        }

        // MÉTODO IMPORTANTE: Click en el módulo de órdenes
        private void OrdersModule_Click(object sender, RoutedEventArgs e)
        {
            // Verificar permisos una vez más
            if (_currentUser.Role == "salesperson")
            {
                MessageBox.Show(
                    "No tiene permisos para acceder al módulo de órdenes.",
                    "Acceso Denegado",
                    MessageBoxButton.OK,
                    MessageBoxImage.Warning);
                return;
            }

            StatusText.Text = "Abriendo módulo de órdenes...";

            try
            {
                // Abrir ventana de órdenes
                OrdersManagementWindow ordersWindow = new OrdersManagementWindow(_currentUser);
                ordersWindow.Show();

                // Opcional: Cerrar menú principal o dejarlo abierto
                // this.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show(
                    $"Error al abrir el módulo de órdenes:\n{ex.Message}",
                    "Error",
                    MessageBoxButton.OK,
                    MessageBoxImage.Error);
            }
        }

        // MÉTODO IMPORTANTE: Click en logout
        private void LogoutButton_Click(object sender, RoutedEventArgs e)
        {
            var result = MessageBox.Show(
                "¿Está seguro que desea cerrar sesión?",
                "Confirmar",
                MessageBoxButton.YesNo,
                MessageBoxImage.Question);

            if (result == MessageBoxResult.Yes)
            {
                _timer?.Stop();

                // Volver al login
                LoginWindow loginWindow = new LoginWindow();
                loginWindow.Show();
                this.Close();
            }
        }

        protected override void OnClosed(EventArgs e)
        {
            _timer?.Stop();
            base.OnClosed(e);
        }
    }
}


================================================
FILE: SistemaGestionProyectos2/Views/NewOrderWindow.xaml
================================================
﻿<Window x:Class="SistemaGestionProyectos2.Views.NewOrderWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Nueva Orden de Compra - IMA Mecatrónica" 
        Height="700" 
        Width="600"
        WindowStartupLocation="CenterOwner"
        ResizeMode="NoResize">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Header -->
        <Border Grid.Row="0" Background="Black" Height="50">
            <Grid>
                <StackPanel Orientation="Horizontal" 
                           VerticalAlignment="Center"
                           Margin="20,0">
                    <TextBlock Text="➕" 
                             Foreground="#FFC107"
                             FontSize="20"
                             Margin="0,0,15,0"/>
                    <TextBlock Text="NUEVA ORDEN" 
                             Foreground="White"
                             FontSize="18"
                             FontWeight="Bold"
                             VerticalAlignment="Center"/>
                </StackPanel>

                <TextBlock HorizontalAlignment="Right"
                         VerticalAlignment="Center"
                         Margin="0,0,20,0"
                         Foreground="White"
                         FontSize="12">
                    <TextBlock.Text>
                        <Binding Source="{x:Static sys:DateTime.Now}" 
                                StringFormat="{}{0:dd/MM/yyyy}"
                                xmlns:sys="clr-namespace:System;assembly=mscorlib"/>
                    </TextBlock.Text>
                </TextBlock>
            </Grid>
        </Border>

        <!-- Formulario -->
        <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto">
            <Grid Margin="30,20">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <!-- Sección: Información Básica -->
                <Border Grid.Row="0" 
                       Background="#f5f5f5" 
                       Padding="10"
                       Margin="0,0,0,15">
                    <TextBlock Text="INFORMACIÓN BÁSICA" 
                             FontWeight="Bold"
                             FontSize="12"/>
                </Border>

                <!-- Orden de Compra y Cotización -->
                <Grid Grid.Row="1" Margin="0,0,0,15">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="20"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <StackPanel Grid.Column="0">
                        <TextBlock Text="ORDEN DE COMPRA *" 
                                 FontSize="11"
                                 FontWeight="SemiBold"
                                 Margin="0,0,0,5"/>
                        <TextBox x:Name="OrderNumberTextBox"
                                Height="35"
                                FontSize="14"
                                CharacterCasing="Upper"/>
                    </StackPanel>

                    <StackPanel Grid.Column="2">
                        <TextBlock Text="COTIZACIÓN" 
                                 FontSize="11"
                                 FontWeight="SemiBold"
                                 Margin="0,0,0,5"/>
                        <TextBox x:Name="QuotationTextBox"
                                Height="35"
                                FontSize="14"
                                CharacterCasing="Upper"/>
                    </StackPanel>
                </Grid>

                <!-- Fecha O.C. -->
                <StackPanel Grid.Row="2" Margin="0,0,0,15">
                    <TextBlock Text="FECHA O.C. *" 
                             FontSize="11"
                             FontWeight="SemiBold"
                             Margin="0,0,0,5"/>
                    <DatePicker x:Name="OrderDatePicker"
                               Height="35"
                               FontSize="14"
                               SelectedDate="{x:Static sys:DateTime.Now}"
                               xmlns:sys="clr-namespace:System;assembly=mscorlib"/>
                </StackPanel>

                <!-- Sección: Cliente y Contacto -->
                <Border Grid.Row="3" 
                       Background="#f5f5f5" 
                       Padding="10"
                       Margin="0,0,0,15">
                    <TextBlock Text="CLIENTE Y CONTACTO" 
                             FontWeight="Bold"
                             FontSize="12"/>
                </Border>

                <!-- Cliente -->
                <StackPanel Grid.Row="4" Margin="0,0,0,15">
                    <TextBlock Text="CLIENTE *" 
                             FontSize="11"
                             FontWeight="SemiBold"
                             Margin="0,0,0,5"/>
                    <ComboBox x:Name="ClientComboBox"
                             Height="35"
                             FontSize="14"
                             DisplayMemberPath="Name"
                             SelectedValuePath="Id"
                             SelectionChanged="ClientComboBox_SelectionChanged">
                        <ComboBox.ItemContainerStyle>
                            <Style TargetType="ComboBoxItem">
                                <Setter Property="Padding" Value="5"/>
                            </Style>
                        </ComboBox.ItemContainerStyle>
                    </ComboBox>
                    <Button x:Name="NewClientButton"
                           Content="+ Nuevo Cliente"
                           HorizontalAlignment="Right"
                           Margin="0,5,0,0"
                           Padding="10,3"
                           Background="Transparent"
                           BorderBrush="#999"
                           FontSize="11"
                           Cursor="Hand"
                           Click="NewClientButton_Click"/>
                </StackPanel>

                <!-- Contacto -->
                <StackPanel Grid.Row="5" Margin="0,0,0,15">
                    <TextBlock Text="CONTACTO *" 
                             FontSize="11"
                             FontWeight="SemiBold"
                             Margin="0,0,0,5"/>
                    <ComboBox x:Name="ContactComboBox"
                             Height="35"
                             FontSize="14"
                             DisplayMemberPath="Name"
                             SelectedValuePath="Id"
                             IsEnabled="False">
                        <ComboBox.ItemContainerStyle>
                            <Style TargetType="ComboBoxItem">
                                <Setter Property="Padding" Value="5"/>
                            </Style>
                        </ComboBox.ItemContainerStyle>
                    </ComboBox>
                </StackPanel>

                <!-- Descripción -->
                <StackPanel Grid.Row="6" Margin="0,0,0,15">
                    <TextBlock Text="DESCRIPCIÓN *" 
                             FontSize="11"
                             FontWeight="SemiBold"
                             Margin="0,0,0,5"/>
                    <TextBox x:Name="DescriptionTextBox"
                            Height="60"
                            FontSize="14"
                            TextWrapping="Wrap"
                            AcceptsReturn="True"
                            VerticalScrollBarVisibility="Auto"/>
                </StackPanel>

                <!-- Vendedor -->
                <StackPanel Grid.Row="7" Margin="0,0,0,15">
                    <TextBlock Text="VENDEDOR *" 
                             FontSize="11"
                             FontWeight="SemiBold"
                             Margin="0,0,0,5"/>
                    <ComboBox x:Name="VendorComboBox"
                             Height="35"
                             FontSize="14"
                             DisplayMemberPath="FullName"
                             SelectedValuePath="Id">
                        <ComboBox.ItemContainerStyle>
                            <Style TargetType="ComboBoxItem">
                                <Setter Property="Padding" Value="5"/>
                            </Style>
                        </ComboBox.ItemContainerStyle>
                    </ComboBox>
                </StackPanel>

                <!-- Sección: Información Financiera -->
                <Border Grid.Row="8" 
                       Background="#f5f5f5" 
                       Padding="10"
                       Margin="0,0,0,15">
                    <TextBlock Text="INFORMACIÓN FINANCIERA" 
                             FontWeight="Bold"
                             FontSize="12"/>
                </Border>

                <!-- Subtotal, Gasto y Fecha Entrega -->
                <Grid Grid.Row="9">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <!-- Primera fila: Subtotal y Gasto -->
                    <Grid Grid.Row="0" Margin="0,0,0,15">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="20"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <StackPanel Grid.Column="0">
                            <TextBlock Text="SUBTOTAL VENTA (MXN) *" 
                                     FontSize="11"
                                     FontWeight="SemiBold"
                                     Margin="0,0,0,5"/>
                            <Grid>
                                <TextBlock Text="$" 
                                         VerticalAlignment="Center"
                                         Margin="10,0,0,0"
                                         FontSize="14"/>
                                <TextBox x:Name="SubtotalTextBox"
                                        Height="35"
                                        FontSize="14"
                                        Padding="25,0,5,0"
                                        TextChanged="SubtotalTextBox_TextChanged"
                                        PreviewTextInput="NumericTextBox_PreviewTextInput"/>
                            </Grid>
                        </StackPanel>

                        <StackPanel Grid.Column="2">
                            <TextBlock Text="GASTO (MXN)" 
                                     FontSize="11"
                                     FontWeight="SemiBold"
                                     Margin="0,0,0,5"/>
                            <Grid>
                                <TextBlock Text="$" 
                                         VerticalAlignment="Center"
                                         Margin="10,0,0,0"
                                         FontSize="14"/>
                                <TextBox x:Name="ExpenseTextBox"
                                        Height="35"
                                        FontSize="14"
                                        Padding="25,0,5,0"
                                        Text="0"
                                        PreviewTextInput="NumericTextBox_PreviewTextInput"/>
                            </Grid>
                        </StackPanel>
                    </Grid>

                    <!-- Segunda fila: Total calculado y Fecha Entrega -->
                    <Grid Grid.Row="1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="20"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <StackPanel Grid.Column="0">
                            <TextBlock Text="TOTAL CON IVA (16%)" 
                                     FontSize="11"
                                     FontWeight="SemiBold"
                                     Margin="0,0,0,5"/>
                            <Border Background="#E8F5E9"
                                   BorderBrush="#4CAF50"
                                   BorderThickness="1"
                                   Height="35"
                                   CornerRadius="3">
                                <TextBlock x:Name="TotalTextBlock"
                                         Text="$ 0.00"
                                         VerticalAlignment="Center"
                                         Margin="10,0"
                                         FontSize="14"
                                         FontWeight="Bold"
                                         Foreground="#2E7D32"/>
                            </Border>
                        </StackPanel>

                        <StackPanel Grid.Column="2">
                            <TextBlock Text="FECHA ENTREGA EST. *" 
                                     FontSize="11"
                                     FontWeight="SemiBold"
                                     Margin="0,0,0,5"/>
                            <DatePicker x:Name="DeliveryDatePicker"
                                       Height="35"
                                       FontSize="14"/>
                        </StackPanel>
                    </Grid>
                </Grid>
            </Grid>
        </ScrollViewer>

        <!-- Botones de Acción -->
        <Border Grid.Row="2" 
               Background="#f5f5f5"
               BorderBrush="#DDD"
               BorderThickness="0,1,0,0">
            <Grid Margin="30,15">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <TextBlock Grid.Column="0"
                         Text="* Campos obligatorios"
                         FontStyle="Italic"
                         FontSize="11"
                         Foreground="#666"
                         VerticalAlignment="Center"/>

                <Button Grid.Column="1"
                       x:Name="SaveButton"
                       Content="GUARDAR"
                       Width="120"
                       Height="40"
                       Margin="0,0,10,0"
                       FontWeight="Bold"
                       Click="SaveButton_Click"
                       Cursor="Hand">
                    <Button.Template>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="border"
                                   Background="#FFC107"
                                   CornerRadius="3">
                                <ContentPresenter HorizontalAlignment="Center"
                                                VerticalAlignment="Center"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="#FFB300"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="#FFA000"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                </Button>

                <Button Grid.Column="2"
                       x:Name="CancelButton"
                       Content="CANCELAR"
                       Width="120"
                       Height="40"
                       Background="White"
                       BorderBrush="#999"
                       BorderThickness="1"
                       Click="CancelButton_Click"
                       Cursor="Hand"/>
            </Grid>
        </Border>
    </Grid>
</Window>


================================================
FILE: SistemaGestionProyectos2/Views/NewOrderWindow.xaml.cs
================================================
﻿using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using SistemaGestionProyectos2.Models;
using SistemaGestionProyectos2.Services;

namespace SistemaGestionProyectos2.Views
{
    public partial class NewOrderWindow : Window
    {
        private readonly SupabaseService _supabaseService;
        private List<ClientDb> _clients;
        private List<ContactDb> _contacts;
        private List<VendorDb> _vendors;
        private UserSession _currentUser;
        private bool _isLoading = false;

        public NewOrderWindow()
        {
            InitializeComponent();
            _supabaseService = SupabaseService.Instance;

            // Obtener usuario actual del Owner window si es posible
            if (this.Owner is OrdersManagementWindow parentWindow)
            {
                // Podríamos pasar el usuario si lo necesitamos
            }

            _ = LoadInitialDataAsync();
        }

        // Constructor alternativo con usuario
        public NewOrderWindow(UserSession currentUser) : this()
        {
            _currentUser = currentUser;
        }

        private async Task LoadInitialDataAsync()
        {
            try
            {
                _isLoading = true;
                SaveButton.IsEnabled = false;
                SaveButton.Content = "Cargando datos...";

                // Cargar clientes desde Supabase
                _clients = await _supabaseService.GetClients();

                if (_clients != null && _clients.Count > 0)
                {
                    ClientComboBox.ItemsSource = _clients;
                    ClientComboBox.DisplayMemberPath = "Name";
                    ClientComboBox.SelectedValuePath = "Id";

                    System.Diagnostics.Debug.WriteLine($"✅ Clientes cargados: {_clients.Count}");
                }
                else
                {
                    System.Diagnostics.Debug.WriteLine("⚠️ No se encontraron clientes");
                }

                // Cargar vendedores desde Supabase
                _vendors = await _supabaseService.GetVendors();

                if (_vendors != null && _vendors.Count > 0)
                {
                    VendorComboBox.ItemsSource = _vendors;
                    VendorComboBox.DisplayMemberPath = "VendorName";
                    VendorComboBox.SelectedValuePath = "Id";

                    System.Diagnostics.Debug.WriteLine($"✅ Vendedores cargados: {_vendors.Count}");
                }
                else
                {
                    System.Diagnostics.Debug.WriteLine("⚠️ No se encontraron vendedores");
                }

                // Establecer fecha por defecto
                OrderDatePicker.SelectedDate = DateTime.Now;
                DeliveryDatePicker.SelectedDate = DateTime.Now.AddDays(30);

                System.Diagnostics.Debug.WriteLine($"✅ Datos iniciales cargados");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"❌ Error cargando datos iniciales: {ex.Message}");
                MessageBox.Show(
                    $"Error al cargar datos:\n{ex.Message}\n\n" +
                    "Verifique su conexión a internet.",
                    "Error",
                    MessageBoxButton.OK,
                    MessageBoxImage.Warning);
            }
            finally
            {
                _isLoading = false;
                SaveButton.IsEnabled = true;
                SaveButton.Content = "GUARDAR";
            }
        }

        private async void ClientComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ClientComboBox.SelectedItem is ClientDb selectedClient)
            {
                System.Diagnostics.Debug.WriteLine($"📋 Cliente seleccionado: {selectedClient.Name} (ID: {selectedClient.Id})");

                ContactComboBox.IsEnabled = false;
                ContactComboBox.ItemsSource = null;

                try
                {
                    // Cargar contactos del cliente desde Supabase
                    _contacts = await _supabaseService.GetContactsByClient(selectedClient.Id);

                    System.Diagnostics.Debug.WriteLine($"📞 Contactos encontrados: {_contacts?.Count ?? 0}");

                    if (_contacts != null && _contacts.Count > 0)
                    {
                        // Debug: Imprimir los contactos encontrados
                        foreach (var contact in _contacts)
                        {
                            System.Diagnostics.Debug.WriteLine($"   - Contacto: {contact.ContactName ?? "SIN NOMBRE"} (ID: {contact.Id})");
                        }

                        ContactComboBox.ItemsSource = _contacts;
                        ContactComboBox.DisplayMemberPath = "ContactName";
                        ContactComboBox.SelectedValuePath = "Id";
                        ContactComboBox.IsEnabled = true;

                        // Si solo hay un contacto, seleccionarlo automáticamente
                        if (_contacts.Count == 1)
                        {
                            ContactComboBox.SelectedIndex = 0;
                            System.Diagnostics.Debug.WriteLine($"✅ Auto-seleccionado único contacto");
                        }
                    }
                    else
                    {
                        System.Diagnostics.Debug.WriteLine($"⚠️ No hay contactos para el cliente {selectedClient.Name}");

                        // Crear un contacto temporal/genérico
                        _contacts = new List<ContactDb>
                        {
                            new ContactDb
                            {
                                Id = 0,
                                ContactName = $"Contacto General - {selectedClient.Name}",
                                ClientId = selectedClient.Id,
                                Email = "sin-email@temporal.com"
                            }
                        };

                        ContactComboBox.ItemsSource = _contacts;
                        ContactComboBox.DisplayMemberPath = "ContactName";
                        ContactComboBox.SelectedValuePath = "Id";
                        ContactComboBox.IsEnabled = true;
                        ContactComboBox.SelectedIndex = 0;

                        System.Diagnostics.Debug.WriteLine($"ℹ️ Creado contacto temporal para {selectedClient.Name}");
                    }
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine($"❌ Error cargando contactos: {ex.Message}");

                    // En caso de error, crear contacto temporal
                    _contacts = new List<ContactDb>
                    {
                        new ContactDb
                        {
                            Id = 0,
                            ContactName = "Error al cargar contactos",
                            ClientId = selectedClient.Id
                        }
                    };

                    ContactComboBox.ItemsSource = _contacts;
                    ContactComboBox.DisplayMemberPath = "ContactName";
                    ContactComboBox.SelectedValuePath = "Id";
                    ContactComboBox.IsEnabled = true;
                }
            }
            else
            {
                ContactComboBox.IsEnabled = false;
                ContactComboBox.ItemsSource = null;
                System.Diagnostics.Debug.WriteLine("⚠️ No hay cliente seleccionado");
            }
        }

        private void SubtotalTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            CalculateTotal();
        }

        private void CalculateTotal()
        {
            if (decimal.TryParse(SubtotalTextBox.Text, out decimal subtotal))
            {
                decimal total = subtotal * 1.16m; // Agregar 16% de IVA
                TotalTextBlock.Text = total.ToString("C", new CultureInfo("es-MX"));
            }
            else
            {
                TotalTextBlock.Text = "$ 0.00";
            }
        }

        private void NumericTextBox_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            // Permitir solo números y punto decimal
            var regex = new Regex(@"^[0-9]*\.?[0-9]*$");
            var newText = (sender as TextBox).Text + e.Text;
            e.Handled = !regex.IsMatch(newText);
        }

        private async void SaveButton_Click(object sender, RoutedEventArgs e)
        {
            // Validar campos obligatorios
            if (!ValidateForm())
            {
                return;
            }

            try
            {
                SaveButton.IsEnabled = false;
                SaveButton.Content = "GUARDANDO...";

                // Obtener el ID del contacto seleccionado
                int? contactId = null;
                if (ContactComboBox.SelectedValue != null)
                {
                    var selectedValue = ContactComboBox.SelectedValue;
                    if (selectedValue is int intValue && intValue > 0)
                    {
                        contactId = intValue;
                    }
                }

                // Crear nueva orden
                var newOrder = new OrderDb
                {
                    Po = OrderNumberTextBox.Text.Trim().ToUpper(),
                    Quote = QuotationTextBox.Text?.Trim().ToUpper(),
                    PoDate = OrderDatePicker.SelectedDate,
                    ClientId = (int?)ClientComboBox.SelectedValue,
                    ContactId = contactId, // Usar el contactId procesado
                    Description = DescriptionTextBox.Text.Trim(),
                    SalesmanId = (int?)VendorComboBox.SelectedValue,
                    EstDelivery = DeliveryDatePicker.SelectedDate,
                    SaleSubtotal = decimal.TryParse(SubtotalTextBox.Text, out decimal subtotal) ? subtotal : 0,
                    SaleTotal = subtotal * 1.16m,
                    Expense = decimal.TryParse(ExpenseTextBox.Text, out decimal expense) ? expense : 0,
                    OrderStatus = 1, // Estado inicial: PENDIENTE
                    ProgressPercentage = 0,
                    OrderPercentage = 0
                };

                // Log para depuración
                System.Diagnostics.Debug.WriteLine($"📝 Creando orden:");
                System.Diagnostics.Debug.WriteLine($"   PO: {newOrder.Po}");
                System.Diagnostics.Debug.WriteLine($"   Cliente ID: {newOrder.ClientId}");
                System.Diagnostics.Debug.WriteLine($"   Contacto ID: {newOrder.ContactId}");
                System.Diagnostics.Debug.WriteLine($"   Vendedor ID: {newOrder.SalesmanId}");
                System.Diagnostics.Debug.WriteLine($"   Total: {newOrder.SaleTotal}");

                // Guardar en Supabase con el ID del usuario actual
                var userId = _currentUser?.Id ?? 1; // Por defecto 1 si no hay usuario
                var createdOrder = await _supabaseService.CreateOrder(newOrder, userId);

                if (createdOrder != null)
                {
                    System.Diagnostics.Debug.WriteLine($"✅ Orden creada con ID: {createdOrder.Id}");

                    MessageBox.Show(
                        $"✅ Orden {newOrder.Po} guardada exitosamente.\n\n" +
                        $"Cliente: {(ClientComboBox.SelectedItem as ClientDb)?.Name}\n" +
                        $"Vendedor: {(VendorComboBox.SelectedItem as VendorDb)?.VendorName}\n" +
                        $"Total: {TotalTextBlock.Text}",
                        "Orden Guardada",
                        MessageBoxButton.OK,
                        MessageBoxImage.Information);

                    this.DialogResult = true;
                    this.Close();
                }
                else
                {
                    throw new Exception("No se pudo crear la orden en la base de datos");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(
                    $"Error al guardar la orden:\n{ex.Message}",
                    "Error",
                    MessageBoxButton.OK,
                    MessageBoxImage.Error);

                System.Diagnostics.Debug.WriteLine($"❌ Error completo: {ex}");
            }
            finally
            {
                SaveButton.IsEnabled = true;
                SaveButton.Content = "GUARDAR";
            }
        }

        private bool ValidateForm()
        {
            var errors = new List<string>();

            if (string.IsNullOrWhiteSpace(OrderNumberTextBox.Text))
                errors.Add("• Orden de Compra es obligatorio");

            if (!OrderDatePicker.SelectedDate.HasValue)
                errors.Add("• Fecha O.C. es obligatoria");

            if (ClientComboBox.SelectedItem == null)
                errors.Add("• Cliente es obligatorio");

            // Validación mejorada para contacto
            if (ContactComboBox.IsEnabled && ContactComboBox.ItemsSource != null)
            {
                if (ContactComboBox.SelectedItem == null)
                {
                    errors.Add("• Debe seleccionar un contacto");
                }
            }

            if (string.IsNullOrWhiteSpace(DescriptionTextBox.Text))
                errors.Add("• Descripción es obligatoria");

            if (VendorComboBox.SelectedItem == null)
                errors.Add("• Vendedor es obligatorio");

            if (string.IsNullOrWhiteSpace(SubtotalTextBox.Text) ||
                !decimal.TryParse(SubtotalTextBox.Text, out decimal subtotal) ||
                subtotal <= 0)
                errors.Add("• Subtotal debe ser mayor a 0");

            if (!DeliveryDatePicker.SelectedDate.HasValue)
                errors.Add("• Fecha de Entrega es obligatoria");

            // Validar que la fecha de entrega sea posterior a la fecha de orden
            if (OrderDatePicker.SelectedDate.HasValue && DeliveryDatePicker.SelectedDate.HasValue)
            {
                if (DeliveryDatePicker.SelectedDate.Value < OrderDatePicker.SelectedDate.Value)
                {
                    errors.Add("• La fecha de entrega debe ser posterior a la fecha de O.C.");
                }
            }

            if (errors.Any())
            {
                MessageBox.Show(
                    "Por favor corrija los siguientes errores:\n\n" + string.Join("\n", errors),
                    "Validación",
                    MessageBoxButton.OK,
                    MessageBoxImage.Warning);
                return false;
            }

            return true;
        }

        private void CancelButton_Click(object sender, RoutedEventArgs e)
        {
            if (_isLoading)
            {
                MessageBox.Show(
                    "Por favor espere a que se carguen los datos.",
                    "Cargando",
                    MessageBoxButton.OK,
                    MessageBoxImage.Information);
                return;
            }

            // Verificar si hay cambios sin guardar
            bool hasChanges = !string.IsNullOrWhiteSpace(OrderNumberTextBox.Text) ||
                            !string.IsNullOrWhiteSpace(DescriptionTextBox.Text) ||
                            !string.IsNullOrWhiteSpace(SubtotalTextBox.Text) ||
                            ClientComboBox.SelectedItem != null;

            if (hasChanges)
            {
                var result = MessageBox.Show(
                    "¿Está seguro que desea cancelar?\nLos datos no guardados se perderán.",
                    "Confirmar",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Question);

                if (result == MessageBoxResult.No)
                {
                    return;
                }
            }

            this.DialogResult = false;
            this.Close();
        }

        private void NewClientButton_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show(
                "Función para agregar nuevo cliente.\n" +
                "Será implementada en una próxima versión.\n\n" +
                "Por ahora, use los clientes existentes.",
                "Nuevo Cliente",
                MessageBoxButton.OK,
                MessageBoxImage.Information);
        }

        // Permitir solo números en el campo de gasto
        private void ExpenseTextBox_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            NumericTextBox_PreviewTextInput(sender, e);
        }
    }
}


================================================
FILE: SistemaGestionProyectos2/Views/OrdersManagementWindow.xaml
================================================
﻿<Window x:Class="SistemaGestionProyectos2.Views.OrdersManagementWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="IMA Mecatrónica - Manejo de Órdenes" 
        Height="800" 
        Width="1400"
        WindowStartupLocation="CenterScreen"
        WindowState="Maximized">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="30"/>
        </Grid.RowDefinitions>

        <!-- Header -->
        <Border Grid.Row="0" Background="Black" Height="60">
            <Grid>
                <StackPanel Orientation="Horizontal" 
                           VerticalAlignment="Center"
                           Margin="20,0">
                    <!-- Logo IMA -->
                    <Border Width="100" Height="35" Margin="0,0,20,0">
                        <Grid>
                            <Rectangle Stroke="White" StrokeThickness="1.5"/>
                            <TextBlock Text="IMA" 
                                     FontSize="18" 
                                     FontWeight="Bold"
                                     Foreground="White"
                                     HorizontalAlignment="Center"
                                     VerticalAlignment="Center"/>
                        </Grid>
                    </Border>

                    <TextBlock Text="MANEJO DE ÓRDENES" 
                             Foreground="White"
                             FontSize="22"
                             FontWeight="Bold"
                             VerticalAlignment="Center"/>
                </StackPanel>

                <!-- Botones de navegación -->
                <StackPanel Orientation="Horizontal" 
                           HorizontalAlignment="Right"
                           VerticalAlignment="Center"
                           Margin="0,0,20,0">
                    <Button Content="⬅ Volver" 
                           Click="BackButton_Click"
                           Background="Transparent"
                           BorderBrush="White"
                           BorderThickness="1"
                           Foreground="White"
                           Padding="15,5"
                           Margin="0,0,10,0"
                           Cursor="Hand"/>

                    <Button x:Name="ExportButton"
                           Content="📊 Exportar" 
                           Background="Transparent"
                           BorderBrush="White"
                           BorderThickness="1"
                           Foreground="White"
                           Padding="15,5"
                           Margin="0,0,10,0"
                           Cursor="Hand"/>
                </StackPanel>
            </Grid>
        </Border>

        <!-- Toolbar -->
        <Border Grid.Row="1" Background="#f5f5f5" Padding="10">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <!-- Botones de acción -->
                <StackPanel Grid.Column="0" Orientation="Horizontal">
                    <Button x:Name="NewOrderButton"
                           Click="NewOrderButton_Click"
                           Height="40"
                           Width="150"
                           Margin="0,0,10,0"
                           Cursor="Hand">
                        <Button.Template>
                            <ControlTemplate TargetType="Button">
                                <Border x:Name="border"
                                       Background="#FFC107"
                                       CornerRadius="3">
                                    <ContentPresenter HorizontalAlignment="Center"
                                                    VerticalAlignment="Center"/>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="border" Property="Background" Value="#FFB300"/>
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter TargetName="border" Property="Background" Value="#DDD"/>
                                        <Setter TargetName="border" Property="Opacity" Value="0.6"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Button.Template>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="➕" FontSize="16" Margin="0,0,8,0" Foreground="Black"/>
                            <TextBlock Text="NUEVA ORDEN" FontWeight="Bold" Foreground="Black"/>
                        </StackPanel>
                    </Button>

                    <Button x:Name="RefreshButton"
                           Click="RefreshButton_Click"
                           Content="🔄"
                           Width="40"
                           Height="40"
                           FontSize="18"
                           Background="White"
                           BorderBrush="#999"
                           BorderThickness="1"
                           Margin="0,0,10,0"
                           Cursor="Hand"
                           ToolTip="Actualizar"/>
                </StackPanel>

                <!-- Búsqueda -->
                <Border Grid.Column="1" 
                       BorderBrush="#999"
                       BorderThickness="1"
                       Background="White"
                       CornerRadius="3"
                       Height="35"
                       HorizontalAlignment="Right"
                       Width="300"
                       Margin="10,0">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <TextBox x:Name="SearchBox"
                                BorderThickness="0"
                                VerticalAlignment="Center"
                                Margin="10,0"
                                FontSize="14"
                                TextChanged="SearchBox_TextChanged">
                            <TextBox.Style>
                                <Style TargetType="TextBox">
                                    <Style.Triggers>
                                        <Trigger Property="Text" Value="">
                                            <Setter Property="Background">
                                                <Setter.Value>
                                                    <VisualBrush AlignmentX="Left" AlignmentY="Center" Stretch="None">
                                                        <VisualBrush.Visual>
                                                            <TextBlock Text="Buscar por O.C., Cliente o Descripción..." 
                                                                     Foreground="#999" 
                                                                     FontStyle="Italic"/>
                                                        </VisualBrush.Visual>
                                                    </VisualBrush>
                                                </Setter.Value>
                                            </Setter>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                        </TextBox>

                        <TextBlock Grid.Column="1" 
                                 Text="🔍"
                                 FontSize="16"
                                 VerticalAlignment="Center"
                                 Margin="0,0,10,0"
                                 Foreground="#666"/>
                    </Grid>
                </Border>

                <!-- Filtros -->
                <StackPanel Grid.Column="2" Orientation="Horizontal">
                    <TextBlock Text="Estado:" 
                             VerticalAlignment="Center"
                             Margin="0,0,5,0"/>
                    <ComboBox x:Name="StatusFilter"
                            Width="150"
                            Height="35"
                            SelectionChanged="StatusFilter_SelectionChanged">
                        <ComboBoxItem Content="Todos" IsSelected="True"/>
                        <ComboBoxItem Content="EN PROCESO"/>
                        <ComboBoxItem Content="COMPLETADA"/>
                        <ComboBoxItem Content="CANCELADA"/>
                        <ComboBoxItem Content="EN ESPERA"/>
                    </ComboBox>
                </StackPanel>
            </Grid>
        </Border>

        <!-- DataGrid -->
        <Border Grid.Row="2" Margin="10" BorderBrush="#DDD" BorderThickness="1">
            <DataGrid x:Name="OrdersDataGrid"
                     AutoGenerateColumns="False"
                     CanUserAddRows="False"
                     CanUserDeleteRows="False"
                     GridLinesVisibility="Horizontal"
                     HeadersVisibility="Column"
                     Background="White"
                     BorderThickness="0"
                     RowHeight="35"
                     FontSize="12">

                <DataGrid.Resources>
                    <Style TargetType="DataGridColumnHeader">
                        <Setter Property="Background" Value="#f0f0f0"/>
                        <Setter Property="Foreground" Value="Black"/>
                        <Setter Property="FontWeight" Value="Bold"/>
                        <Setter Property="Height" Value="40"/>
                        <Setter Property="BorderBrush" Value="#DDD"/>
                        <Setter Property="BorderThickness" Value="0,0,1,1"/>
                        <Setter Property="Padding" Value="10,0"/>
                    </Style>

                    <Style TargetType="DataGridRow">
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#E3F2FD"/>
                            </Trigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" Value="#BBDEFB"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.Resources>

                <DataGrid.Columns>
                    <!-- Columnas visibles para todos -->
                    <DataGridTextColumn Header="O.C." 
                                       Binding="{Binding OrderNumber}" 
                                       Width="100"/>

                    <DataGridTextColumn Header="FECHA O.C." 
                                       Binding="{Binding OrderDate, StringFormat=dd/MM/yyyy}" 
                                       Width="100"/>

                    <DataGridTextColumn Header="EMPRESA" 
                                       Binding="{Binding ClientName}" 
                                       Width="200"/>

                    <DataGridTextColumn Header="DESCRIPCIÓN" 
                                       Binding="{Binding Description}" 
                                       Width="*"/>

                    <DataGridTextColumn Header="VENDEDOR" 
                                       Binding="{Binding VendorName}" 
                                       Width="150"/>

                    <DataGridTextColumn Header="FECHA PROMESA" 
                                       Binding="{Binding PromiseDate, StringFormat=dd/MM/yyyy}" 
                                       Width="110"/>

                    <DataGridTextColumn Header="% AVANCE" 
                                       Binding="{Binding ProgressPercentage, StringFormat={}{0}%}" 
                                       Width="80">
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="TextBlock">
                                <Setter Property="HorizontalAlignment" Value="Center"/>
                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>

                    <!-- Columnas exclusivas para Admin -->
                    <DataGridTextColumn x:Name="SubtotalColumn"
                                       Header="SUBTOTAL" 
                                       Binding="{Binding Subtotal, StringFormat=C}" 
                                       Width="100"
                                       Visibility="Collapsed">
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="TextBlock">
                                <Setter Property="HorizontalAlignment" Value="Right"/>
                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>

                    <DataGridTextColumn x:Name="TotalColumn"
                                       Header="TOTAL" 
                                       Binding="{Binding Total, StringFormat=C}" 
                                       Width="100"
                                       Visibility="Collapsed">
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="TextBlock">
                                <Setter Property="HorizontalAlignment" Value="Right"/>
                                <Setter Property="FontWeight" Value="Bold"/>
                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>

                    <DataGridTextColumn x:Name="OrderPercentageColumn"
                                       Header="% ORDEN" 
                                       Binding="{Binding OrderPercentage, StringFormat={}{0}%}" 
                                       Width="80"
                                       Visibility="Collapsed">
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="TextBlock">
                                <Setter Property="HorizontalAlignment" Value="Center"/>
                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>

                    <!-- Estado con colores -->
                    <DataGridTemplateColumn Header="ESTATUS" Width="120">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <Border CornerRadius="3" 
                                       Padding="5,2"
                                       HorizontalAlignment="Center">
                                    <Border.Style>
                                        <Style TargetType="Border">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Status}" Value="EN PROCESO">
                                                    <Setter Property="Background" Value="#FFF3E0"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Status}" Value="COMPLETADA">
                                                    <Setter Property="Background" Value="#E8F5E9"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Status}" Value="CANCELADA">
                                                    <Setter Property="Background" Value="#FFEBEE"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Status}" Value="EN ESPERA">
                                                    <Setter Property="Background" Value="#E3F2FD"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Border.Style>
                                    <TextBlock Text="{Binding Status}" 
                                             FontWeight="SemiBold"
                                             FontSize="10"/>
                                </Border>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>

                    <!-- Acciones -->
                    <DataGridTemplateColumn Header="ACCIONES" Width="100">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                    <Button Content="✏" 
                                           Click="EditButton_Click"
                                           Tag="{Binding}"
                                           Background="Transparent"
                                           BorderThickness="0"
                                           FontSize="16"
                                           Cursor="Hand"
                                           ToolTip="Editar"
                                           Margin="5,0"/>
                                    <Button x:Name="DeleteBtn"
                                           Content="🗑" 
                                           Click="DeleteButton_Click"
                                           Tag="{Binding}"
                                           Background="Transparent"
                                           BorderThickness="0"
                                           FontSize="16"
                                           Cursor="Hand"
                                           ToolTip="Eliminar"
                                           Margin="5,0"
                                           Visibility="Collapsed"/>
                                </StackPanel>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                </DataGrid.Columns>
            </DataGrid>
        </Border>

        <!-- Status Bar -->
        <StatusBar Grid.Row="3" Background="#f0f0f0">
            <StatusBarItem>
                <TextBlock x:Name="StatusText" Text="0 órdenes cargadas"/>
            </StatusBarItem>
            <StatusBarItem HorizontalAlignment="Right">
                <TextBlock x:Name="UserStatusText" Text="Usuario: "/>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>


================================================
FILE: SistemaGestionProyectos2/Views/OrdersManagementWindow.xaml.cs
================================================
﻿using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using SistemaGestionProyectos2.Models;
using SistemaGestionProyectos2.Services;

namespace SistemaGestionProyectos2.Views
{
    public partial class OrdersManagementWindow : Window
    {
        private UserSession _currentUser;
        private ObservableCollection<OrderViewModel> _orders;
        private CollectionViewSource _ordersViewSource;
        private readonly SupabaseService _supabaseService;
        private List<ClientDb> _clients;
        private List<VendorDb> _vendors;
        private List<OrderStatusDb> _orderStatuses;

        public OrdersManagementWindow(UserSession user)
        {
            InitializeComponent();
            _currentUser = user;
            _orders = new ObservableCollection<OrderViewModel>();
            _supabaseService = SupabaseService.Instance;

            InitializeUI();
            ConfigurePermissions();

            // Cargar datos iniciales
            _ = LoadInitialDataAsync();
        }

        private void InitializeUI()
        {
            // Configurar información del usuario
            UserStatusText.Text = $"Usuario: {_currentUser.FullName} ({GetRoleDisplayName(_currentUser.Role)})";

            // Configurar el DataGrid
            _ordersViewSource = new CollectionViewSource { Source = _orders };
            OrdersDataGrid.ItemsSource = _ordersViewSource.View;

            // Título de la ventana
            this.Title = $"IMA Mecatrónica - Manejo de Órdenes - {_currentUser.FullName}";
        }

        private void ConfigurePermissions()
        {
            // Configurar visibilidad y permisos según el rol
            switch (_currentUser.Role)
            {
                case "admin":
                    // Admin puede ver y editar todo
                    NewOrderButton.IsEnabled = true;
                    SubtotalColumn.Visibility = Visibility.Visible;
                    TotalColumn.Visibility = Visibility.Visible;
                    OrderPercentageColumn.Visibility = Visibility.Visible;
                    EnableDeleteButtons(true);
                    break;

                case "coordinator":
                    // Coordinador NO puede crear nuevas órdenes
                    NewOrderButton.IsEnabled = false;
                    NewOrderButton.ToolTip = "Solo el administrador puede crear órdenes";

                    // NO puede ver campos financieros
                    SubtotalColumn.Visibility = Visibility.Collapsed;
                    TotalColumn.Visibility = Visibility.Collapsed;
                    OrderPercentageColumn.Visibility = Visibility.Collapsed;

                    // NO puede eliminar
                    EnableDeleteButtons(false);
                    break;

                case "salesperson":
                    // Los vendedores no deberían poder acceder aquí
                    MessageBox.Show(
                        "No tiene permisos para acceder a este módulo.",
                        "Acceso Denegado",
                        MessageBoxButton.OK,
                        MessageBoxImage.Warning);
                    this.Close();
                    break;
            }
        }

        private async Task LoadInitialDataAsync()
        {
            try
            {
                StatusText.Text = "Cargando datos...";

                // Cargar clientes, vendedores y estados en paralelo
                var clientsTask = _supabaseService.GetClients();
                var vendorsTask = _supabaseService.GetVendors();
                var statusesTask = _supabaseService.GetOrderStatuses();

                await Task.WhenAll(clientsTask, vendorsTask, statusesTask);

                _clients = await clientsTask;
                _vendors = await vendorsTask;
                _orderStatuses = await statusesTask;

                System.Diagnostics.Debug.WriteLine($"✅ Datos cargados: {_clients.Count} clientes, {_vendors.Count} vendedores, {_orderStatuses.Count} estados");

                // Ahora cargar las órdenes
                await LoadOrders();
            }
            catch (Exception ex)
            {
                StatusText.Text = "Error cargando datos";
                MessageBox.Show(
                    $"Error al cargar datos iniciales:\n{ex.Message}",
                    "Error",
                    MessageBoxButton.OK,
                    MessageBoxImage.Error);
            }
        }

        private async Task LoadOrders()
        {
            try
            {
                StatusText.Text = "Cargando órdenes...";
                _orders.Clear();

                // Cargar primero las 100 órdenes más recientes para velocidad
                var ordersFromDb = await _supabaseService.GetOrders(limit: 100, offset: 0);

                if (ordersFromDb != null && ordersFromDb.Count > 0)
                {
                    foreach (var order in ordersFromDb)
                    {
                        // Obtener nombre del cliente
                        var client = _clients?.FirstOrDefault(c => c.Id == order.ClientId);

                        // Obtener nombre del vendedor
                        var vendor = _vendors?.FirstOrDefault(v => v.Id == order.SalesmanId);

                        // Obtener nombre del estado
                        var status = _orderStatuses?.FirstOrDefault(s => s.Id == order.OrderStatus);

                        _orders.Add(new OrderViewModel
                        {
                            Id = order.Id,
                            OrderNumber = order.Po ?? "N/A",
                            OrderDate = order.PoDate ?? DateTime.Now,
                            ClientName = client?.Name ?? "Sin cliente",
                            Description = order.Description ?? "",
                            VendorName = vendor?.VendorName ?? "Sin vendedor",
                            PromiseDate = order.EstDelivery ?? DateTime.Now.AddDays(30),
                            ProgressPercentage = order.ProgressPercentage,
                            OrderPercentage = order.OrderPercentage,
                            Subtotal = order.SaleSubtotal ?? 0,
                            Total = order.SaleTotal ?? 0,
                            Status = status?.Name ?? "PENDIENTE",
                            Invoiced = false // Por ahora
                        });
                    }

                    StatusText.Text = $"{_orders.Count} órdenes más recientes cargadas";
                    System.Diagnostics.Debug.WriteLine($"✅ {_orders.Count} órdenes cargadas correctamente");

                    // Cargar el resto en segundo plano si hay más de 100
                    if (ordersFromDb.Count == 100)
                    {
                        _ = LoadRemainingOrdersAsync();
                    }
                }
                else
                {
                    StatusText.Text = "No se encontraron órdenes";
                    System.Diagnostics.Debug.WriteLine("⚠️ No se encontraron órdenes en la BD");
                }
            }
            catch (Exception ex)
            {
                StatusText.Text = "Error al cargar órdenes";
                System.Diagnostics.Debug.WriteLine($"❌ Error cargando órdenes: {ex.Message}");

                MessageBox.Show(
                    $"Error al cargar órdenes:\n{ex.Message}",
                    "Error",
                    MessageBoxButton.OK,
                    MessageBoxImage.Warning);
            }
        }

        private async Task LoadRemainingOrdersAsync()
        {
            try
            {
                int offset = 100;
                int batchSize = 100;
                bool hasMore = true;

                while (hasMore)
                {
                    var morOrders = await _supabaseService.GetOrders(limit: batchSize, offset: offset);

                    if (morOrders != null && morOrders.Count > 0)
                    {
                        // Agregar al UI en el thread principal
                        await Application.Current.Dispatcher.InvokeAsync(() =>
                        {
                            foreach (var order in morOrders)
                            {
                                var client = _clients?.FirstOrDefault(c => c.Id == order.ClientId);
                                var vendor = _vendors?.FirstOrDefault(v => v.Id == order.SalesmanId);
                                var status = _orderStatuses?.FirstOrDefault(s => s.Id == order.OrderStatus);

                                _orders.Add(new OrderViewModel
                                {
                                    Id = order.Id,
                                    OrderNumber = order.Po ?? "N/A",
                                    OrderDate = order.PoDate ?? DateTime.Now,
                                    ClientName = client?.Name ?? "Sin cliente",
                                    Description = order.Description ?? "",
                                    VendorName = vendor?.VendorName ?? "Sin vendedor",
                                    PromiseDate = order.EstDelivery ?? DateTime.Now.AddDays(30),
                                    ProgressPercentage = order.ProgressPercentage,
                                    OrderPercentage = order.OrderPercentage,
                                    Subtotal = order.SaleSubtotal ?? 0,
                                    Total = order.SaleTotal ?? 0,
                                    Status = status?.Name ?? "PENDIENTE",
                                    Invoiced = false
                                });
                            }

                            StatusText.Text = $"{_orders.Count} órdenes cargadas";
                        });

                        offset += batchSize;
                        hasMore = morOrders.Count == batchSize;
                    }
                    else
                    {
                        hasMore = false;
                    }

                    // Pequeña pausa para no saturar
                    await Task.Delay(100);
                }

                System.Diagnostics.Debug.WriteLine($"✅ Carga completa: {_orders.Count} órdenes totales");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error cargando órdenes adicionales: {ex.Message}");
            }
        }

        private void EnableDeleteButtons(bool enable)
        {
            // Esta función habilitará los botones de eliminar en el DataGrid
            // Se aplicará cuando se carguen los datos
        }

        private string GetRoleDisplayName(string role)
        {
            switch (role)
            {
                case "admin": return "Administrador";
                case "coordinator": return "Coordinador";
                case "salesperson": return "Vendedor";
                default: return role;
            }
        }

        // Event Handlers
        private void BackButton_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        private void NewOrderButton_Click(object sender, RoutedEventArgs e)
        {
            if (_currentUser.Role != "admin")
            {
                MessageBox.Show(
                    "Solo el administrador puede crear nuevas órdenes.",
                    "Permiso Denegado",
                    MessageBoxButton.OK,
                    MessageBoxImage.Warning);
                return;
            }

            try
            {
                // Pasar el usuario actual a la ventana de nueva orden
                var newOrderWindow = new NewOrderWindow(_currentUser);
                newOrderWindow.Owner = this;

                if (newOrderWindow.ShowDialog() == true)
                {
                    // Recargar órdenes después de crear una nueva
                    _ = LoadOrders();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(
                    $"Error al abrir el formulario:\n{ex.Message}",
                    "Error",
                    MessageBoxButton.OK,
                    MessageBoxImage.Error);
            }
        }

        private async void RefreshButton_Click(object sender, RoutedEventArgs e)
        {
            StatusText.Text = "Actualizando...";

            // Deshabilitar controles durante la actualización
            RefreshButton.IsEnabled = false;
            NewOrderButton.IsEnabled = false;

            try
            {
                await LoadOrders();
            }
            finally
            {
                RefreshButton.IsEnabled = true;

                // Restaurar permisos del botón Nueva Orden según el rol
                if (_currentUser.Role == "admin")
                {
                    NewOrderButton.IsEnabled = true;
                }
            }
        }

        private async void SearchBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            var searchText = SearchBox.Text?.Trim();

            // Si no hay texto o es muy corto, cargar todas las órdenes
            if (string.IsNullOrWhiteSpace(searchText))
            {
                await LoadOrders();
                return;
            }

            // Aplicar filtro local en lugar de buscar en Supabase
            if (_ordersViewSource?.View != null)
            {
                _ordersViewSource.View.Filter = item =>
                {
                    var order = item as OrderViewModel;
                    if (order == null) return false;

                    var searchLower = searchText.ToLower();
                    return order.OrderNumber.ToLower().Contains(searchLower) ||
                           order.ClientName.ToLower().Contains(searchLower) ||
                           order.Description.ToLower().Contains(searchLower) ||
                           order.VendorName.ToLower().Contains(searchLower);
                };

                var count = _ordersViewSource.View.Cast<object>().Count();
                StatusText.Text = $"{count} órdenes encontradas";
            }
        }

        private void StatusFilter_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (_ordersViewSource?.View == null) return;

            var selectedItem = (ComboBoxItem)StatusFilter.SelectedItem;
            var filterText = selectedItem?.Content?.ToString();

            _ordersViewSource.View.Filter = item =>
            {
                if (filterText == "Todos")
                    return true;

                var order = item as OrderViewModel;
                return order?.Status == filterText;
            };

            UpdateStatusBar();
        }

        private void EditButton_Click(object sender, RoutedEventArgs e)
        {
            var button = sender as Button;
            var order = button?.Tag as OrderViewModel;

            if (order == null) return;

            try
            {
                // Abrir ventana de edición con los permisos del usuario actual
                var editWindow = new EditOrderWindow(order, _currentUser);
                editWindow.Owner = this;

                if (editWindow.ShowDialog() == true)
                {
                    // Recargar órdenes después de editar
                    _ = LoadOrders();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(
                    $"Error al abrir el editor:\n{ex.Message}",
                    "Error",
                    MessageBoxButton.OK,
                    MessageBoxImage.Error);
            }
        }

        private async void DeleteButton_Click(object sender, RoutedEventArgs e)
        {
            if (_currentUser.Role != "admin")
            {
                MessageBox.Show(
                    "Solo el administrador puede eliminar órdenes.",
                    "Permiso Denegado",
                    MessageBoxButton.OK,
                    MessageBoxImage.Warning);
                return;
            }

            var button = sender as Button;
            var order = button?.Tag as OrderViewModel;

            if (order == null) return;

            var result = MessageBox.Show(
                $"¿Está seguro que desea eliminar la orden {order.OrderNumber}?\n\n" +
                "Esta acción no se puede deshacer.",
                "Confirmar Eliminación",
                MessageBoxButton.YesNo,
                MessageBoxImage.Warning);

            if (result == MessageBoxResult.Yes)
            {
                try
                {
                    // Por ahora, solo remover de la lista local
                    // TODO: Implementar eliminación en Supabase cuando sea necesario

                    _orders.Remove(order);
                    UpdateStatusBar();

                    MessageBox.Show(
                        "Orden marcada para eliminación.\n" +
                        "(Nota: La eliminación real está deshabilitada por seguridad)",
                        "Información",
                        MessageBoxButton.OK,
                        MessageBoxImage.Information);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(
                        $"Error al eliminar la orden:\n{ex.Message}",
                        "Error",
                        MessageBoxButton.OK,
                        MessageBoxImage.Error);
                }
            }
        }

        private void UpdateStatusBar()
        {
            var visibleCount = _ordersViewSource?.View?.Cast<object>().Count() ?? 0;
            StatusText.Text = $"{visibleCount} órdenes visibles de {_orders.Count} total";
        }
    }
}


================================================
FILE: SistemaGestionProyectos2/Views/ProyectosView.xaml
================================================
﻿<UserControl x:Class="SistemaGestionProyectos2.Views.ProyectosView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Grid>
        <TextBlock Text="Vista de Proyectos - En construcción" 
                   HorizontalAlignment="Center" 
                   VerticalAlignment="Center"/>
    </Grid>
</UserControl>


================================================
FILE: SistemaGestionProyectos2/Views/ProyectosView.xaml.cs
================================================
﻿using System.Windows.Controls;

namespace SistemaGestionProyectos2.Views
{
    public partial class ProyectosView : UserControl
    {
        public ProyectosView()
        {
            InitializeComponent();
        }
    }
}


================================================
FILE: SistemaGestionProyectos2/Views/SupabaseTestWindow.xaml
================================================
﻿<Window x:Class="SistemaGestionProyectos2.Views.SupabaseTestWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="IMA Mecatrónica - Módulo de Pruebas Supabase" 
        Height="700" 
        Width="900"
        WindowStartupLocation="CenterScreen"
        ResizeMode="CanResize"
        MinHeight="500"
        MinWidth="700">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Header -->
        <Border Grid.Row="0" Background="Black" Height="60">
            <Grid>
                <StackPanel Orientation="Horizontal" 
                           VerticalAlignment="Center"
                           Margin="20,0">
                    <TextBlock Text="🧪" 
                             Foreground="#4CAF50"
                             FontSize="24"
                             Margin="0,0,15,0"/>
                    <TextBlock Text="MÓDULO DE PRUEBAS SUPABASE" 
                             Foreground="White"
                             FontSize="20"
                             FontWeight="Bold"
                             VerticalAlignment="Center"/>
                </StackPanel>

                <StackPanel Orientation="Horizontal"
                          HorizontalAlignment="Right"
                          VerticalAlignment="Center"
                          Margin="0,0,20,0">
                    <Border x:Name="ConnectionStatusBorder"
                           Background="#333"
                           CornerRadius="5"
                           Padding="10,5">
                        <StackPanel Orientation="Horizontal">
                            <Ellipse x:Name="StatusIndicator"
                                    Width="10"
                                    Height="10"
                                    Fill="Gray"
                                    Margin="0,0,8,0"/>
                            <TextBlock x:Name="ConnectionStatusText"
                                     Text="No conectado"
                                     Foreground="White"
                                     FontSize="12"/>
                        </StackPanel>
                    </Border>
                </StackPanel>
            </Grid>
        </Border>

        <!-- Contenido Principal -->
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="300"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <!-- Panel Izquierdo - Lista de Pruebas -->
            <Border Grid.Column="0" 
                   Background="#f5f5f5"
                   BorderBrush="#DDD"
                   BorderThickness="0,0,1,0">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <!-- Título -->
                    <Border Grid.Row="0"
                           Background="#e0e0e0"
                           Padding="15,10">
                        <TextBlock Text="PRUEBAS DISPONIBLES"
                                 FontWeight="Bold"
                                 FontSize="12"/>
                    </Border>

                    <!-- Lista de Pruebas -->
                    <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto">
                        <StackPanel Margin="10">
                            <!-- Test 1: Conexión Básica -->
                            <Button x:Name="TestConnectionBtn"
                                   Click="TestConnection_Click"
                                   Margin="0,5"
                                   Height="60"
                                   Background="White"
                                   BorderBrush="#2196F3"
                                   BorderThickness="1"
                                   Cursor="Hand">
                                <Grid Width="250">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="40"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="30"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" 
                                             Text="🔌"
                                             FontSize="20"
                                             VerticalAlignment="Center"/>
                                    <StackPanel Grid.Column="1" VerticalAlignment="Center">
                                        <TextBlock Text="Test de Conexión"
                                                 FontWeight="Bold"
                                                 FontSize="12"/>
                                        <TextBlock Text="Verificar conexión básica"
                                                 FontSize="10"
                                                 Foreground="#666"/>
                                    </StackPanel>
                                    <CheckBox x:Name="Check1"
                                            Grid.Column="2"
                                            IsEnabled="False"
                                            VerticalAlignment="Center"/>
                                </Grid>
                            </Button>

                            <!-- Test 2: Listar Tablas -->
                            <Button x:Name="TestTablesBtn"
                                   Click="TestTables_Click"
                                   Margin="0,5"
                                   Height="60"
                                   Background="White"
                                   BorderBrush="#FF9800"
                                   BorderThickness="1"
                                   Cursor="Hand">
                                <Grid Width="250">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="40"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="30"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" 
                                             Text="📊"
                                             FontSize="20"
                                             VerticalAlignment="Center"/>
                                    <StackPanel Grid.Column="1" VerticalAlignment="Center">
                                        <TextBlock Text="Listar Tablas"
                                                 FontWeight="Bold"
                                                 FontSize="12"/>
                                        <TextBlock Text="Ver estructura de BD"
                                                 FontSize="10"
                                                 Foreground="#666"/>
                                    </StackPanel>
                                    <CheckBox x:Name="Check2"
                                            Grid.Column="2"
                                            IsEnabled="False"
                                            VerticalAlignment="Center"/>
                                </Grid>
                            </Button>

                            <!-- Test 3: Cargar Órdenes -->
                            <Button x:Name="TestOrdersBtn"
                                   Click="TestOrders_Click"
                                   Margin="0,5"
                                   Height="60"
                                   Background="White"
                                   BorderBrush="#4CAF50"
                                   BorderThickness="1"
                                   Cursor="Hand">
                                <Grid Width="250">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="40"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="30"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" 
                                             Text="📦"
                                             FontSize="20"
                                             VerticalAlignment="Center"/>
                                    <StackPanel Grid.Column="1" VerticalAlignment="Center">
                                        <TextBlock Text="Cargar Órdenes"
                                                 FontWeight="Bold"
                                                 FontSize="12"/>
                                        <TextBlock Text="Obtener registros de t_order"
                                                 FontSize="10"
                                                 Foreground="#666"/>
                                    </StackPanel>
                                    <CheckBox x:Name="Check3"
                                            Grid.Column="2"
                                            IsEnabled="False"
                                            VerticalAlignment="Center"/>
                                </Grid>
                            </Button>

                            <!-- Test 4: Verificar Usuarios -->
                            <Button x:Name="TestUsersBtn"
                                   Click="TestUsers_Click"
                                   Margin="0,5"
                                   Height="60"
                                   Background="White"
                                   BorderBrush="#9C27B0"
                                   BorderThickness="1"
                                   Cursor="Hand">
                                <Grid Width="250">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="40"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="30"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" 
                                             Text="👥"
                                             FontSize="20"
                                             VerticalAlignment="Center"/>
                                    <StackPanel Grid.Column="1" VerticalAlignment="Center">
                                        <TextBlock Text="Verificar Usuarios"
                                                 FontWeight="Bold"
                                                 FontSize="12"/>
                                        <TextBlock Text="Listar usuarios del sistema"
                                                 FontSize="10"
                                                 Foreground="#666"/>
                                    </StackPanel>
                                    <CheckBox x:Name="Check4"
                                            Grid.Column="2"
                                            IsEnabled="False"
                                            VerticalAlignment="Center"/>
                                </Grid>
                            </Button>

                            <!-- Test 5: Simular Login -->
                            <Button x:Name="TestLoginBtn"
                                   Click="TestLogin_Click"
                                   Margin="0,5"
                                   Height="60"
                                   Background="White"
                                   BorderBrush="#F44336"
                                   BorderThickness="1"
                                   Cursor="Hand">
                                <Grid Width="250">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="40"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="30"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" 
                                             Text="🔐"
                                             FontSize="20"
                                             VerticalAlignment="Center"/>
                                    <StackPanel Grid.Column="1" VerticalAlignment="Center">
                                        <TextBlock Text="Simular Login"
                                                 FontWeight="Bold"
                                                 FontSize="12"/>
                                        <TextBlock Text="Probar autenticación"
                                                 FontSize="10"
                                                 Foreground="#666"/>
                                    </StackPanel>
                                    <CheckBox x:Name="Check5"
                                            Grid.Column="2"
                                            IsEnabled="False"
                                            VerticalAlignment="Center"/>
                                </Grid>
                            </Button>

                            <!-- Test 6: Test de Escritura -->
                            <Button x:Name="TestWriteBtn"
                                   Click="TestWrite_Click"
                                   Margin="0,5"
                                   Height="60"
                                   Background="White"
                                   BorderBrush="#607D8B"
                                   BorderThickness="1"
                                   Cursor="Hand">
                                <Grid Width="250">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="40"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="30"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" 
                                             Text="✏️"
                                             FontSize="20"
                                             VerticalAlignment="Center"/>
                                    <StackPanel Grid.Column="1" VerticalAlignment="Center">
                                        <TextBlock Text="Test de Escritura"
                                                 FontWeight="Bold"
                                                 FontSize="12"/>
                                        <TextBlock Text="Crear registro de prueba"
                                                 FontSize="10"
                                                 Foreground="#666"/>
                                    </StackPanel>
                                    <CheckBox x:Name="Check6"
                                            Grid.Column="2"
                                            IsEnabled="False"
                                            VerticalAlignment="Center"/>
                                </Grid>
                            </Button>
                        </StackPanel>
                    </ScrollViewer>

                    <!-- Botones de Acción -->
                    <Border Grid.Row="2"
                           Background="#e0e0e0"
                           Padding="10">
                        <StackPanel>
                            <Button x:Name="RunAllTestsBtn"
                                   Content="▶ EJECUTAR TODAS LAS PRUEBAS"
                                   Height="35"
                                   Background="#4CAF50"
                                   Foreground="White"
                                   FontWeight="Bold"
                                   Click="RunAllTests_Click"
                                   Cursor="Hand"/>
                            <Button x:Name="ClearResultsBtn"
                                   Content="🗑 LIMPIAR RESULTADOS"
                                   Height="30"
                                   Background="White"
                                   Margin="0,5,0,0"
                                   Click="ClearResults_Click"
                                   Cursor="Hand"/>
                        </StackPanel>
                    </Border>
                </Grid>
            </Border>

            <!-- Panel Derecho - Resultados -->
            <Grid Grid.Column="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <!-- Título de Resultados -->
                <Border Grid.Row="0"
                       Background="#333"
                       Padding="15,10">
                    <Grid>
                        <TextBlock Text="RESULTADOS DE PRUEBAS"
                                 Foreground="White"
                                 FontWeight="Bold"
                                 FontSize="12"/>
                        <TextBlock x:Name="TimestampText"
                                 HorizontalAlignment="Right"
                                 Foreground="#AAA"
                                 FontSize="10"/>
                    </Grid>
                </Border>

                <!-- Área de Resultados -->
                <ScrollViewer Grid.Row="1" 
                            VerticalScrollBarVisibility="Auto"
                            Background="#1e1e1e">
                    <RichTextBox x:Name="ResultsRichTextBox"
                               Background="#1e1e1e"
                               Foreground="#d4d4d4"
                               FontFamily="Consolas"
                               FontSize="12"
                               Padding="15"
                               IsReadOnly="True"
                               BorderThickness="0">
                        <FlowDocument>
                            <Paragraph>
                                <Run Text="🚀 Módulo de Pruebas Listo" 
                                    Foreground="#4CAF50"
                                    FontWeight="Bold"/>
                                <LineBreak/>
                                <Run Text="Seleccione una prueba del panel izquierdo para comenzar..."
                                    Foreground="#888"/>
                            </Paragraph>
                        </FlowDocument>
                    </RichTextBox>
                </ScrollViewer>
            </Grid>
        </Grid>

        <!-- Status Bar -->
        <StatusBar Grid.Row="2" Background="#222">
            <StatusBarItem>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Estado: " Foreground="White"/>
                    <TextBlock x:Name="StatusText" 
                             Text="Listo" 
                             Foreground="#4CAF50"
                             FontWeight="Bold"/>
                </StackPanel>
            </StatusBarItem>
            <StatusBarItem HorizontalAlignment="Right">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Pruebas ejecutadas: " Foreground="White"/>
                    <TextBlock x:Name="TestCountText" 
                             Text="0" 
                             Foreground="White"
                             FontWeight="Bold"/>
                </StackPanel>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>


================================================
FILE: SistemaGestionProyectos2/Views/SupabaseTestWindow.xaml.cs
================================================
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Media;
using Microsoft.Extensions.Configuration;
using Supabase;
using Postgrest.Attributes;
using Postgrest.Models;

namespace SistemaGestionProyectos2.Views
{
    public partial class SupabaseTestWindow : Window
    {
        private Client _supabaseClient;
        private IConfiguration _configuration;
        private int _testsExecuted = 0;
        private bool _isConnected = false;
        private UserTable _currentTestUser = null;

        public SupabaseTestWindow()
        {
            InitializeComponent();
            TimestampText.Text = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
        }

        // Método helper para agregar texto con formato al RichTextBox
        private void AddResult(string title, string content, bool isSuccess = true, bool isHeader = false)
        {
            var paragraph = new Paragraph();

            if (isHeader)
            {
                paragraph.Inlines.Add(new Run($"\n╔══════════════════════════════════════╗\n")
                {
                    Foreground = Brushes.Gray
                });
                paragraph.Inlines.Add(new Run($"▶ {title}")
                {
                    FontWeight = FontWeights.Bold,
                    FontSize = 14,
                    Foreground = Brushes.Cyan
                });
                paragraph.Inlines.Add(new Run($"\n╚══════════════════════════════════════╝\n")
                {
                    Foreground = Brushes.Gray
                });
            }
            else
            {
                var icon = isSuccess ? "✅" : "❌";
                var color = isSuccess ? Brushes.LightGreen : Brushes.IndianRed;

                paragraph.Inlines.Add(new Run($"{icon} {title}: ")
                {
                    FontWeight = FontWeights.Bold,
                    Foreground = color
                });
            }

            if (!string.IsNullOrEmpty(content))
            {
                paragraph.Inlines.Add(new Run($"\n{content}\n")
                {
                    Foreground = Brushes.LightGray
                });
            }

            ResultsRichTextBox.Document.Blocks.Add(paragraph);
            ResultsRichTextBox.ScrollToEnd();
        }

        // Test 1: Conexión Básica
        private async void TestConnection_Click(object sender, RoutedEventArgs e)
        {
            AddResult("TEST DE CONEXIÓN", "", true, true);
            StatusText.Text = "Ejecutando test de conexión...";

            try
            {
                // Cargar configuración
                var builder = new ConfigurationBuilder()
                    .SetBasePath(System.IO.Directory.GetCurrentDirectory())
                    .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true);

                _configuration = builder.Build();

                var url = _configuration["Supabase:Url"];
                var key = _configuration["Supabase:AnonKey"];

                AddResult("Configuración", $"URL: {url}\nKey: {key?.Substring(0, 20)}...", true);

                // Crear cliente
                var options = new SupabaseOptions
                {
                    AutoConnectRealtime = false
                };

                _supabaseClient = new Client(url, key, options);
                await _supabaseClient.InitializeAsync();

                _isConnected = true;
                UpdateConnectionStatus(true);

                AddResult("Conexión establecida", "Cliente Supabase inicializado correctamente", true);
                Check1.IsChecked = true;

                StatusText.Text = "Conexión exitosa";
                _testsExecuted++;
                UpdateTestCount();
            }
            catch (Exception ex)
            {
                AddResult("Error de conexión", ex.Message, false);
                StatusText.Text = "Error en conexión";
                UpdateConnectionStatus(false);
            }
        }

        // Test 2: Listar Tablas (simulado)
        private async void TestTables_Click(object sender, RoutedEventArgs e)
        {
            if (!EnsureConnected()) return;

            AddResult("ESTRUCTURA DE BASE DE DATOS", "", true, true);
            StatusText.Text = "Verificando estructura...";

            try
            {
                // Verificar que podemos acceder a las tablas principales
                var orders = await _supabaseClient.From<OrderTable>().Select("*").Limit(1).Get();
                var clients = await _supabaseClient.From<ClientTable>().Select("*").Limit(1).Get();
                var users = await _supabaseClient.From<UserTable>().Select("*").Limit(1).Get();

                var tablesInfo = "Tablas accesibles:\n";
                tablesInfo += $"• t_order - ✅ ({orders?.Models?.Count ?? 0} registro de prueba)\n";
                tablesInfo += $"• t_client - ✅ ({clients?.Models?.Count ?? 0} registro de prueba)\n";
                tablesInfo += $"• users - ✅ ({users?.Models?.Count ?? 0} registro de prueba)\n";

                AddResult("Verificación de estructura", tablesInfo, true);
                Check2.IsChecked = true;

                StatusText.Text = "Estructura verificada";
                _testsExecuted++;
                UpdateTestCount();
            }
            catch (Exception ex)
            {
                AddResult("Error al verificar estructura", ex.Message, false);
                StatusText.Text = "Error verificando tablas";
            }
        }

        // Test 3: Cargar Órdenes
        private async void TestOrders_Click(object sender, RoutedEventArgs e)
        {
            if (!EnsureConnected()) return;

            AddResult("TEST DE CARGA DE ÓRDENES", "", true, true);
            StatusText.Text = "Cargando órdenes...";

            try
            {
                var response = await _supabaseClient
                    .From<OrderTable>()
                    .Select("*")
                    .Limit(10)
                    .Get();

                var count = response?.Models?.Count ?? 0;

                if (count > 0)
                {
                    var ordersInfo = "Órdenes encontradas:\n";
                    foreach (var order in response.Models.Take(5))
                    {
                        // Obtener nombre del cliente si existe
                        string clientName = "N/A";
                        if (order.ClientId.HasValue)
                        {
                            var clientResponse = await _supabaseClient
                                .From<ClientTable>()
                                .Where(x => x.Id == order.ClientId.Value)
                                .Single();
                            clientName = clientResponse?.Name ?? "N/A";
                        }

                        ordersInfo += $"  • #{order.Po} - Cliente: {clientName}\n";
                        ordersInfo += $"    Descripción: {order.Description?.Substring(0, Math.Min(50, order.Description?.Length ?? 0))}...\n";
                        ordersInfo += $"    Fecha: {order.PoDate?.ToString("dd/MM/yyyy") ?? "N/A"}\n\n";
                    }

                    AddResult($"Total de órdenes: {count}", ordersInfo, true);
                }
                else
                {
                    AddResult("Sin órdenes", "No se encontraron registros en t_order", false);
                }

                Check3.IsChecked = true;
                StatusText.Text = $"{count} órdenes cargadas";
                _testsExecuted++;
                UpdateTestCount();
            }
            catch (Exception ex)
            {
                AddResult("Error al cargar órdenes", ex.Message, false);
                StatusText.Text = "Error cargando órdenes";
            }
        }

        // Test 4: Verificar Usuarios
        private async void TestUsers_Click(object sender, RoutedEventArgs e)
        {
            if (!EnsureConnected()) return;

            AddResult("TEST DE USUARIOS Y AUTENTICACIÓN", "", true, true);
            StatusText.Text = "Verificando usuarios...";

            try
            {
                var response = await _supabaseClient
                    .From<UserTable>()
                    .Select("*")
                    .Get();

                var count = response?.Models?.Count ?? 0;

                if (count > 0)
                {
                    AddResult("=== PRUEBA DE CREDENCIALES CORRECTAS ===", "", true);

                    // Test Admin con contraseña correcta
                    var adminUser = response.Models.FirstOrDefault(u => u.Username == "admin");
                    if (adminUser != null)
                    {
                        bool adminAuth = BCrypt.Net.BCrypt.Verify("ima2025", adminUser.PasswordHash);
                        AddResult("Admin - Contraseña Correcta",
                            $"Usuario: admin\n" +
                            $"Contraseña: ima2025\n" +
                            $"Resultado: {(adminAuth ? "✅ ACCESO PERMITIDO" : "❌ ACCESO DENEGADO")}\n" +
                            $"Rol: {adminUser.Role}",
                            adminAuth);
                    }

                    // Test Coordinador con contraseña correcta
                    var coordUser = response.Models.FirstOrDefault(u => u.Username == "coordinador");
                    if (coordUser != null)
                    {
                        bool coordAuth = BCrypt.Net.BCrypt.Verify("ima2025", coordUser.PasswordHash);
                        AddResult("Coordinador - Contraseña Correcta",
                            $"Usuario: coordinador\n" +
                            $"Contraseña: ima2025\n" +
                            $"Resultado: {(coordAuth ? "✅ ACCESO PERMITIDO" : "❌ ACCESO DENEGADO")}\n" +
                            $"Rol: {coordUser.Role}",
                            coordAuth);
                    }

                    // Test caaj con contraseña correcta
                    var caajUser = response.Models.FirstOrDefault(u => u.Username == "caaj");
                    if (caajUser != null)
                    {
                        bool caajAuth = BCrypt.Net.BCrypt.Verify("anathema", caajUser.PasswordHash);
                        AddResult("Caaj - Contraseña Correcta",
                            $"Usuario: caaj\n" +
                            $"Contraseña: anathema\n" +
                            $"Resultado: {(caajAuth ? "✅ ACCESO PERMITIDO" : "❌ ACCESO DENEGADO")}\n" +
                            $"Rol: {caajUser.Role}",
                            caajAuth);
                    }

                    AddResult("=== PRUEBA DE CREDENCIALES INCORRECTAS ===", "", true);

                    // Test con contraseñas incorrectas
                    if (adminUser != null)
                    {
                        bool wrongPass = BCrypt.Net.BCrypt.Verify("password123", adminUser.PasswordHash);
                        AddResult("Admin - Contraseña Incorrecta",
                            $"Usuario: admin\n" +
                            $"Contraseña: password123 (incorrecta)\n" +
                            $"Resultado: {(wrongPass ? "✅ ACCESO PERMITIDO" : "❌ ACCESO DENEGADO")}",
                            !wrongPass);
                    }

                    if (coordUser != null)
                    {
                        bool wrongPass = BCrypt.Net.BCrypt.Verify("12345", coordUser.PasswordHash);
                        AddResult("Coordinador - Contraseña Incorrecta",
                            $"Usuario: coordinador\n" +
                            $"Contraseña: 12345 (incorrecta)\n" +
                            $"Resultado: {(wrongPass ? "✅ ACCESO PERMITIDO" : "❌ ACCESO DENEGADO")}",
                            !wrongPass);
                    }

                    // Resumen
                    var summary = $"\nRESUMEN DE USUARIOS:\n";
                    var byRole = response.Models.GroupBy(u => u.Role);
                    foreach (var group in byRole)
                    {
                        summary += $"• {group.Key?.ToUpper()}: {group.Count()} usuario(s)\n";
                    }
                    AddResult("Total de usuarios en sistema", summary, true);
                }
                else
                {
                    AddResult("Sin usuarios", "No se encontraron usuarios en la BD", false);
                }

                Check4.IsChecked = true;
                StatusText.Text = "Usuarios verificados";
                _testsExecuted++;
                UpdateTestCount();
            }
            catch (Exception ex)
            {
                AddResult("Error al verificar usuarios", ex.Message, false);
                StatusText.Text = "Error verificando usuarios";
            }
        }

        // Test 5: Simular Login y Permisos
        private async void TestLogin_Click(object sender, RoutedEventArgs e)
        {
            if (!EnsureConnected()) return;

            AddResult("TEST DE PERMISOS POR ROL", "", true, true);
            StatusText.Text = "Simulando operaciones por rol...";

            try
            {
                // Obtener usuarios de prueba
                var adminUser = await _supabaseClient
                    .From<UserTable>()
                    .Where(x => x.Username == "admin")
                    .Single();

                var coordUser = await _supabaseClient
                    .From<UserTable>()
                    .Where(x => x.Username == "coordinador")
                    .Single();

                AddResult("=== PRUEBAS CON ROL ADMIN ===", "", true);

                // Test como Admin
                if (adminUser != null)
                {
                    _currentTestUser = adminUser;

                    // Admin puede leer órdenes
                    var orders = await _supabaseClient.From<OrderTable>().Select("*").Limit(5).Get();
                    AddResult("Admin - Leer Órdenes",
                        $"✅ Puede leer: {orders?.Models?.Count ?? 0} órdenes encontradas", true);

                    // Admin puede modificar órdenes
                    if (orders?.Models?.Count > 0)
                    {
                        var testOrder = orders.Models.First();
                        var originalDesc = testOrder.Description;
                        testOrder.Description = $"[TEST ADMIN {DateTime.Now:HH:mm:ss}] {originalDesc}";

                        try
                        {
                            var updateResult = await _supabaseClient
                                .From<OrderTable>()
                                .Where(x => x.Id == testOrder.Id)
                                .Set(x => x.Description, testOrder.Description)
                                .Update();

                            AddResult("Admin - Modificar Orden",
                                $"✅ Puede modificar: Orden #{testOrder.Po} actualizada", true);

                            // Restaurar valor original
                            await _supabaseClient
                                .From<OrderTable>()
                                .Where(x => x.Id == testOrder.Id)
                                .Set(x => x.Description, originalDesc)
                                .Update();
                        }
                        catch
                        {
                            AddResult("Admin - Modificar Orden", "❌ No pudo modificar", false);
                        }
                    }

                    // Admin puede crear órdenes
                    var newOrder = new OrderTable
                    {
                        Po = $"TEST-ADMIN-{DateTime.Now:yyyyMMddHHmmss}",
                        Description = "ORDEN DE PRUEBA ADMIN - PUEDE SER ELIMINADA",
                        PoDate = DateTime.Now,
                        EstDelivery = DateTime.Now.AddDays(30),
                        ClientId = 1
                    };

                    try
                    {
                        var insertResult = await _supabaseClient
                            .From<OrderTable>()
                            .Insert(newOrder);

                        if (insertResult?.Models?.Count > 0)
                        {
                            var createdId = insertResult.Models.First().Id;
                            AddResult("Admin - Crear Orden",
                                $"✅ Puede crear: Nueva orden TEST-ADMIN creada (ID: {createdId})", true);

                            // Eliminar orden de prueba
                            await _supabaseClient
                                .From<OrderTable>()
                                .Where(x => x.Id == createdId)
                                .Delete();
                        }
                    }
                    catch (Exception ex)
                    {
                        AddResult("Admin - Crear Orden", $"❌ Error al crear: {ex.Message}", false);
                    }
                }

                AddResult("=== PRUEBAS CON ROL COORDINADOR ===", "", true);

                // Test como Coordinador
                if (coordUser != null)
                {
                    _currentTestUser = coordUser;

                    // Coordinador puede leer órdenes
                    var orders = await _supabaseClient.From<OrderTable>().Select("*").Limit(5).Get();
                    AddResult("Coordinador - Leer Órdenes",
                        $"✅ Puede leer: {orders?.Models?.Count ?? 0} órdenes encontradas", true);

                    // Coordinador puede modificar SOLO ciertos campos
                    if (orders?.Models?.Count > 0)
                    {
                        var testOrder = orders.Models.First();
                        var originalDelivery = testOrder.EstDelivery;
                        testOrder.EstDelivery = DateTime.Now.AddDays(45);

                        try
                        {
                            var updateResult = await _supabaseClient
                                .From<OrderTable>()
                                .Where(x => x.Id == testOrder.Id)
                                .Set(x => x.EstDelivery, testOrder.EstDelivery)
                                .Update();

                            AddResult("Coordinador - Modificar Fecha Entrega",
                                $"✅ Puede modificar: Fecha de entrega actualizada en orden #{testOrder.Po}", true);

                            // Restaurar valor original
                            await _supabaseClient
                                .From<OrderTable>()
                                .Where(x => x.Id == testOrder.Id)
                                .Set(x => x.EstDelivery, originalDelivery)
                                .Update();
                        }
                        catch
                        {
                            AddResult("Coordinador - Modificar Fecha Entrega", "❌ No pudo modificar", false);
                        }
                    }

                    // Coordinador NO DEBE poder crear órdenes (simulación de restricción)
                    AddResult("Coordinador - Intento de Crear Orden",
                        "⚠️ SIMULACIÓN: En la aplicación real, el botón 'Nueva Orden' está deshabilitado para coordinadores.\n" +
                        "La BD permitiría la operación, pero la UI lo previene.", true);

                    // Demostrar que técnicamente PODRÍA crear (pero no debe)
                    var newOrderCoord = new OrderTable
                    {
                        Po = $"TEST-COORD-{DateTime.Now:yyyyMMddHHmmss}",
                        Description = "ORDEN NO AUTORIZADA - COORDINADOR",
                        PoDate = DateTime.Now,
                        EstDelivery = DateTime.Now.AddDays(30),
                        ClientId = 1
                    };

                    try
                    {
                        // Intentar crear (esto funcionará porque RLS está deshabilitado)
                        var insertResult = await _supabaseClient
                            .From<OrderTable>()
                            .Insert(newOrderCoord);

                        if (insertResult?.Models?.Count > 0)
                        {
                            var createdId = insertResult.Models.First().Id;
                            AddResult("Coordinador - Prueba técnica de creación",
                                $"⚠️ La BD permitió crear (RLS deshabilitado), pero la aplicación C# lo previene.\n" +
                                $"Orden creada con ID: {createdId} - Será eliminada", false);

                            // Eliminar inmediatamente
                            await _supabaseClient
                                .From<OrderTable>()
                                .Where(x => x.Id == createdId)
                                .Delete();

                            AddResult("", "✅ Orden de prueba eliminada correctamente", true);
                        }
                    }
                    catch (Exception ex)
                    {
                        AddResult("Coordinador - Crear Orden",
                            $"✅ Correctamente bloqueado: {ex.Message}", true);
                    }
                }

                Check5.IsChecked = true;
                StatusText.Text = "Permisos verificados";
                _testsExecuted++;
                UpdateTestCount();
            }
            catch (Exception ex)
            {
                AddResult("Error en simulación de permisos", ex.Message, false);
                StatusText.Text = "Error en prueba de permisos";
            }
        }

        // Test 6: Test de Escritura Completo
        private async void TestWrite_Click(object sender, RoutedEventArgs e)
        {
            if (!EnsureConnected()) return;

            AddResult("TEST COMPLETO DE ESCRITURA", "", true, true);
            StatusText.Text = "Probando operaciones CRUD...";

            var result = MessageBox.Show(
                "Esta prueba realizará operaciones completas de:\n" +
                "• CREATE (Crear nueva orden)\n" +
                "• READ (Leer la orden creada)\n" +
                "• UPDATE (Modificar la orden)\n" +
                "• DELETE (Eliminar la orden)\n\n" +
                "¿Desea continuar?",
                "Confirmar Test CRUD",
                MessageBoxButton.YesNo,
                MessageBoxImage.Question);

            if (result != MessageBoxResult.Yes)
            {
                AddResult("Test cancelado", "El usuario canceló la prueba CRUD", false);
                return;
            }

            try
            {
                int createdOrderId = 0;

                // CREATE - Crear orden de prueba
                AddResult("1. CREATE - Crear Nueva Orden", "", true);
                var testOrder = new OrderTable
                {
                    Po = $"CRUD-TEST-{DateTime.Now:yyyyMMddHHmmss}",
                    Quote = "QUOTE-TEST-001",
                    Description = "ORDEN DE PRUEBA CRUD - SERÁ ELIMINADA",
                    PoDate = DateTime.Now,
                    EstDelivery = DateTime.Now.AddDays(30),
                    ClientId = 1,
                    ContactId = null,
                    SaleSubtotal = 10000.00m,
                    SaleTotal = 11600.00m
                };

                var createResponse = await _supabaseClient
                    .From<OrderTable>()
                    .Insert(testOrder);

                if (createResponse?.Models?.Count > 0)
                {
                    createdOrderId = createResponse.Models.First().Id;
                    AddResult("Orden creada exitosamente",
                        $"✅ ID: {createdOrderId}\n" +
                        $"Número: {testOrder.Po}\n" +
                        $"Descripción: {testOrder.Description}", true);
                }
                else
                {
                    AddResult("Error al crear", "No se pudo crear la orden", false);
                    return;
                }

                // READ - Leer la orden creada
                AddResult("2. READ - Leer Orden Creada", "", true);
                var readResponse = await _supabaseClient
                    .From<OrderTable>()
                    .Where(x => x.Id == createdOrderId)
                    .Single();

                if (readResponse != null)
                {
                    AddResult("Orden leída correctamente",
                        $"✅ Confirmado: Orden #{readResponse.Po} existe en BD\n" +
                        $"Subtotal: ${readResponse.SaleSubtotal:N2}\n" +
                        $"Total: ${readResponse.SaleTotal:N2}", true);
                }

                // UPDATE - Modificar la orden
                AddResult("3. UPDATE - Modificar Orden", "", true);
                var updateResponse = await _supabaseClient
                    .From<OrderTable>()
                    .Where(x => x.Id == createdOrderId)
                    .Set(x => x.Description, "ORDEN MODIFICADA - TEST CRUD ACTUALIZADO")
                    .Set(x => x.EstDelivery, DateTime.Now.AddDays(60))
                    .Update();

                if (updateResponse?.Models?.Count > 0)
                {
                    var updated = updateResponse.Models.First();
                    AddResult("Orden actualizada correctamente",
                        $"✅ Nueva descripción: {updated.Description}\n" +
                        $"Nueva fecha entrega: {updated.EstDelivery?.ToString("dd/MM/yyyy")}", true);
                }

                // DELETE - Eliminar la orden
                AddResult("4. DELETE - Eliminar Orden", "", true);
                await _supabaseClient
                    .From<OrderTable>()
                    .Where(x => x.Id == createdOrderId)
                    .Delete();

                // Verificar que se eliminó
                var verifyDelete = await _supabaseClient
                    .From<OrderTable>()
                    .Where(x => x.Id == createdOrderId)
                    .Single();

                if (verifyDelete == null)
                {
                    AddResult("Orden eliminada correctamente",
                        $"✅ La orden #{testOrder.Po} fue eliminada exitosamente de la BD", true);
                }
                else
                {
                    AddResult("Error al eliminar",
                        "⚠️ La orden aún existe en la BD", false);
                }

                AddResult("TEST CRUD COMPLETO",
                    "✅ Todas las operaciones CRUD funcionan correctamente", true);

                Check6.IsChecked = true;
                StatusText.Text = "Test CRUD exitoso";
                _testsExecuted++;
                UpdateTestCount();
            }
            catch (Exception ex)
            {
                AddResult("Error en test CRUD",
                    $"{ex.Message}\n\n" +
                    "Posibles causas:\n" +
                    "• Problemas de conexión\n" +
                    "• Estructura de tabla diferente\n" +
                    "• Tipos de datos incompatibles",
                    false);
                StatusText.Text = "Error en test CRUD";
            }
        }

        // Ejecutar todas las pruebas
        private async void RunAllTests_Click(object sender, RoutedEventArgs e)
        {
            ClearResults_Click(null, null);

            AddResult("EJECUTANDO SUITE COMPLETA DE PRUEBAS",
                "Iniciando todas las pruebas de conexión, autenticación y permisos...", true, true);

            // Ejecutar pruebas en secuencia
            await Task.Delay(500);
            TestConnection_Click(null, null);

            await Task.Delay(1500);
            if (_isConnected)
            {
                TestTables_Click(null, null);
                await Task.Delay(1500);

                TestOrders_Click(null, null);
                await Task.Delay(1500);

                TestUsers_Click(null, null);
                await Task.Delay(1500);

                TestLogin_Click(null, null);
                await Task.Delay(1500);

                TestWrite_Click(null, null);
            }

            AddResult("SUITE COMPLETA FINALIZADA",
                $"Se ejecutaron {_testsExecuted} pruebas\n" +
                $"Timestamp: {DateTime.Now:dd/MM/yyyy HH:mm:ss}", true, true);
        }

        // Limpiar resultados
        private void ClearResults_Click(object sender, RoutedEventArgs e)
        {
            ResultsRichTextBox.Document.Blocks.Clear();
            var paragraph = new Paragraph();
            paragraph.Inlines.Add(new Run("🚀 Módulo de Pruebas Listo\n")
            {
                Foreground = Brushes.LightGreen,
                FontWeight = FontWeights.Bold
            });
            paragraph.Inlines.Add(new Run("Seleccione una prueba del panel izquierdo para comenzar...")
            {
                Foreground = Brushes.Gray
            });
            ResultsRichTextBox.Document.Blocks.Add(paragraph);

            // Reset checkboxes
            Check1.IsChecked = false;
            Check2.IsChecked = false;
            Check3.IsChecked = false;
            Check4.IsChecked = false;
            Check5.IsChecked = false;
            Check6.IsChecked = false;

            _testsExecuted = 0;
            UpdateTestCount();
            TimestampText.Text = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
        }

        private bool EnsureConnected()
        {
            if (!_isConnected || _supabaseClient == null)
            {
                AddResult("Error", "Primero debe ejecutar el Test de Conexión", false);
                StatusText.Text = "No conectado";
                return false;
            }
            return true;
        }

        private void UpdateConnectionStatus(bool connected)
        {
            _isConnected = connected;
            if (connected)
            {
                StatusIndicator.Fill = Brushes.LightGreen;
                ConnectionStatusText.Text = "Conectado";
                ConnectionStatusBorder.Background = new SolidColorBrush(Color.FromRgb(76, 175, 80));
            }
            else
            {
                StatusIndicator.Fill = Brushes.Gray;
                ConnectionStatusText.Text = "No conectado";
                ConnectionStatusBorder.Background = new SolidColorBrush(Color.FromRgb(51, 51, 51));
            }
        }

        private void UpdateTestCount()
        {
            TestCountText.Text = _testsExecuted.ToString();
        }
    }

    // Modelos actualizados con los campos correctos de tu BD
    [Table("t_order")]
    public class OrderTable : BaseModel
    {
        [PrimaryKey("f_order")]
        public int Id { get; set; }

        [Column("f_client")]
        public int? ClientId { get; set; }

        [Column("f_contact")]
        public int? ContactId { get; set; }

        [Column("f_quote")]
        public string Quote { get; set; }

        [Column("f_po")]
        public string Po { get; set; }

        [Column("f_podate")]
        public DateTime? PoDate { get; set; }

        [Column("f_estdelivery")]
        public DateTime? EstDelivery { get; set; }

        [Column("f_description")]
        public string Description { get; set; }

        [Column("vendor_id")]
        public int? VendorId { get; set; }

        [Column("f_salesubtotal")]
        public decimal? SaleSubtotal { get; set; }

        [Column("f_saletotal")]
        public decimal? SaleTotal { get; set; }
    }

    [Table("t_client")]
    public class ClientTable : BaseModel
    {
        [PrimaryKey("f_client")]
        public int Id { get; set; }

        [Column("f_name")]
        public string Name { get; set; }

        [Column("f_address1")]
        public string Address1 { get; set; }

        [Column("tax_id")]
        public string TaxId { get; set; }

        [Column("phone")]
        public string Phone { get; set; }

        [Column("email")]
        public string Email { get; set; }
    }

    [Table("users")]
    public class UserTable : BaseModel
    {
        [PrimaryKey("id")]
        public int Id { get; set; }

        [Column("username")]
        public string Username { get; set; }

        [Column("email")]
        public string Email { get; set; }

        [Column("password_hash")]
        public string PasswordHash { get; set; }

        [Column("full_name")]
        public string FullName { get; set; }

        [Column("role")]
        public string Role { get; set; }

        [Column("is_active")]
        public bool IsActive { get; set; }
    }
}

